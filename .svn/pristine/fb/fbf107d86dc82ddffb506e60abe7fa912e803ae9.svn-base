package view.beans.structure;

import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;

import oracle.adf.model.BindingContext;
import oracle.adf.model.binding.DCIteratorBinding;
import oracle.adf.share.ADFContext;
import oracle.adf.view.rich.component.rich.RichPopup;
import oracle.adf.view.rich.component.rich.data.RichTable;
import oracle.adf.view.rich.context.AdfFacesContext;
import oracle.adf.view.rich.event.DialogEvent;

import oracle.adf.view.rich.event.DialogEvent.Outcome;

import oracle.adf.view.rich.render.ClientEvent;

import oracle.binding.BindingContainer;
import oracle.binding.OperationBinding;

import oracle.jbo.Row;

public class StructureBean {
    final String OLD_CURR_KEY_VIEWSCOPE_ATTR = "__oldCurrentRowKey__";
    private RichTable structureTable;
    private RichPopup popupNewStructure;
    private RichPopup popupEditStructure;
    private RichPopup popupDeleteStructure;
    private RichTable hstructureTable;
    private RichPopup popupNewHStruct;
    private RichPopup popupEditHStructure;
    private RichPopup popupDeleteHStructure;

    public StructureBean() {
    }

    public void setStructureTable(RichTable structureTable) {
        this.structureTable = structureTable;
    }

    public RichTable getStructureTable() {
        return structureTable;
    }

    public BindingContainer getBindings() {
        return BindingContext.getCurrent().getCurrentBindingsEntry();
    }

    public void OnNewStructureClicked(ActionEvent actionEvent) {
        // Add event code here...
        BindingContainer bindings = getBindings();
        DCIteratorBinding dciter = (DCIteratorBinding) bindings.get("StructuresIterator");
        Row oldCcurrentRow = dciter.getCurrentRow();
        if (oldCcurrentRow != null) {
            ADFContext adfCtx = ADFContext.getCurrent();
            adfCtx.getViewScope().put(OLD_CURR_KEY_VIEWSCOPE_ATTR, oldCcurrentRow.getKey().toStringFormat(true));
        }
        //perform row create
        OperationBinding operationBinding = bindings.getOperationBinding("CreateStructure");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return;
        }
        RichPopup popup = this.getPopupNewStructure();
        RichPopup.PopupHints hints = new RichPopup.PopupHints();
        //empty hints renders dialog in center of screen
        popup.show(hints);
        return;
    }

    public void setPopupNewStructure(RichPopup popupNewStructure) {
        this.popupNewStructure = popupNewStructure;
    }

    public RichPopup getPopupNewStructure() {
        return popupNewStructure;
    }

    // For All New & Edit Dialog ok action
    public void OnDialogAction(DialogEvent dialogEvent) {
        // Add event code here...
        Outcome outcome = dialogEvent.getOutcome();
        if (outcome == Outcome.ok) {
            //commit
            BindingContainer bindings = getBindings();
            OperationBinding operationBinding = bindings.getOperationBinding("Commit");
            Object result = operationBinding.execute();
            if (!operationBinding.getErrors().isEmpty()) {
                //handle errors if any
                //...
                return;
            }
            this.getPopupNewStructure().hide();
            this.getPopupNewHStruct().hide();
            this.getPopupEditStructure().hide();
            this.getPopupEditHStructure().hide();
            /*AdfFacesContext.getCurrentInstance().addPartialTarget(this.getStructureTable());
            AdfFacesContext.getCurrentInstance().addPartialTarget(this.getHstructureTable());*/
        }
    }

    // New & Edit Structure
    public void OnStructureDialogCancel(ClientEvent clientEvent) {
        // Add event code here...
        BindingContainer bindings = getBindings();
        RichPopup popup = this.getPopupNewStructure();
        popup.hide();
        //the cancel operation is executed with immediate=true to bypass the
        //model update. Therefore we manually delete the new row from the
        //iterator
        DCIteratorBinding dciter = (DCIteratorBinding) bindings.get("StructuresIterator");
        Row currentRow = dciter.getCurrentRow();
        dciter.removeCurrentRow();
        //set current row back to original row
        ADFContext adfCtx = ADFContext.getCurrent();
        String oldCurrentRowKey = (String) adfCtx.getViewScope().get(OLD_CURR_KEY_VIEWSCOPE_ATTR);
        dciter.setCurrentRowWithKey(oldCurrentRowKey);
       // AdfFacesContext.getCurrentInstance().addPartialTarget(this.getStructureTable());
        FacesContext fctx = FacesContext.getCurrentInstance();
        //we don't want to continue with the remainder of the lifecycle and
        //thus skip the rest
        fctx.renderResponse();
    }

    public void OnEditStructureClicked(ActionEvent actionEvent) {
        // Add event code here...
        RichPopup popup = this.getPopupEditStructure();
        RichPopup.PopupHints hints = new RichPopup.PopupHints();
        //empty hints renders dialog in center of screen
        popup.show(hints);
    }

    public void setPopupEditStructure(RichPopup popupEditStructure) {
        this.popupEditStructure = popupEditStructure;
    }

    public RichPopup getPopupEditStructure() {
        return popupEditStructure;
    }

    public void setPopupDeleteStructure(RichPopup popupDeleteStructure) {
        this.popupDeleteStructure = popupDeleteStructure;
    }

    public RichPopup getPopupDeleteStructure() {
        return popupDeleteStructure;
    }

    public void OnDeleteStructureAction(DialogEvent dialogEvent) {
        // Add event code here...
        if (dialogEvent.getOutcome().equals(Outcome.yes)) {
            OnDeleteStructureClicked();
        }
    }

    public String OnDeleteStructureClicked() {
        // Add event code here...
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("DeleteStructure");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        } else {
            OperationBinding operationCommit = bindings.getOperationBinding("Commit");
            Object commitResult = operationCommit.execute();
           // AdfFacesContext.getCurrentInstance().addPartialTarget(this.getStructureTable());
            return null;
        }
    }

    public void setHstructureTable(RichTable hstructureTable) {
        this.hstructureTable = hstructureTable;
    }

    public RichTable getHstructureTable() {
        return hstructureTable;
    }

    public void setPopupNewHStruct(RichPopup popupNewHStruct) {
        this.popupNewHStruct = popupNewHStruct;
    }

    public RichPopup getPopupNewHStruct() {
        return popupNewHStruct;
    }

    public void setPopupEditHStructure(RichPopup popupEditHStructure) {
        this.popupEditHStructure = popupEditHStructure;
    }

    public RichPopup getPopupEditHStructure() {
        return popupEditHStructure;
    }

    public void setPopupDeleteHStructure(RichPopup popupDeleteHStructure) {
        this.popupDeleteHStructure = popupDeleteHStructure;
    }

    public RichPopup getPopupDeleteHStructure() {
        return popupDeleteHStructure;
    }

    public void OnNewHStructClicked(ActionEvent actionEvent) {
        // Add event code here...
        BindingContainer bindings = getBindings();
        DCIteratorBinding dciter = (DCIteratorBinding) bindings.get("HistoriquesStructuresStructIterator");
        Row oldCcurrentRow = dciter.getCurrentRow();
        if (oldCcurrentRow != null) {
            ADFContext adfCtx = ADFContext.getCurrent();
            adfCtx.getViewScope().put(OLD_CURR_KEY_VIEWSCOPE_ATTR, oldCcurrentRow.getKey().toStringFormat(true));
        }
        //perform row create
        OperationBinding operationBinding = bindings.getOperationBinding("CreateHStructure");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return;
        }
        RichPopup popup = this.getPopupNewHStruct();
        RichPopup.PopupHints hints = new RichPopup.PopupHints();
        //empty hints renders dialog in center of screen
        popup.show(hints);
        return;
    }

    public void OnEditHStructClick(ActionEvent actionEvent) {
        // Add event code here...
        RichPopup popup = this.getPopupEditHStructure();
        RichPopup.PopupHints hints = new RichPopup.PopupHints();
        //empty hints renders dialog in center of screen
        popup.show(hints);

    }

    public String OnDeleteHStructClicked() {
        // Add event code here...
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("DeleteHStructure");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        } else {
            OperationBinding operationCommit = bindings.getOperationBinding("Commit");
            Object commitResult = operationCommit.execute();
            //AdfFacesContext.getCurrentInstance().addPartialTarget(this.getStructureTable());
            return null;
        }
    }

    // Historique Structure Cancel Dialog
    public void OnHStructDialogCancel(ClientEvent clientEvent) {
        // Add event code here...
        BindingContainer bindings = getBindings();
        RichPopup popup = this.getPopupNewHStruct();
        popup.hide();
        DCIteratorBinding dciter = (DCIteratorBinding) bindings.get("HistoriquesStructuresStructIterator");
        Row currentRow = dciter.getCurrentRow();
        dciter.removeCurrentRow();
        //set current row back to original row
        ADFContext adfCtx = ADFContext.getCurrent();
        String oldCurrentRowKey = (String) adfCtx.getViewScope().get(OLD_CURR_KEY_VIEWSCOPE_ATTR);
        dciter.setCurrentRowWithKey(oldCurrentRowKey);
        //AdfFacesContext.getCurrentInstance().addPartialTarget(this.getHstructureTable());
        FacesContext fctx = FacesContext.getCurrentInstance();
        //we don't want to continue with the remainder of the lifecycle and
        //thus skip the rest
        fctx.renderResponse();
    }

    public void OnDeleteHStructAction(DialogEvent dialogEvent) {
        // Add event code here...
        if (dialogEvent.getOutcome().equals(Outcome.yes)) {
            OnDeleteHStructClicked();
        }
    }
}
