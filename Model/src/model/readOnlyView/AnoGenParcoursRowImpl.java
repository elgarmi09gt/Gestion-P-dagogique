package model.readOnlyView;

import java.security.Key;

import java.util.Map;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

import oracle.adf.share.ADFContext;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;

import sun.misc.BASE64Decoder;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Apr 27 13:10:56 UTC 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AnoGenParcoursRowImpl extends ViewRowImpl {
    public void setParcours(String parcours) {
        this.parcours = parcours;
    }

    public String getParcours() {
        return parcours;
    }

    public void setSess(String sess) {
        this.sess = sess;
    }

    public String getSess() {
        return sess;
    }

    public void setSem(String sem) {
        this.sem = sem;
    }

    public String getSem() {
        return sem;
    }

    public void setAn(String an) {
        this.an = an;
    }

    public String getAn() {
        return an;
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        IdEtudiant {
            protected Object get(AnoGenParcoursRowImpl obj) {
                return obj.getIdEtudiant();
            }

            protected void put(AnoGenParcoursRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Nom {
            protected Object get(AnoGenParcoursRowImpl obj) {
                return obj.getNom();
            }

            protected void put(AnoGenParcoursRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Prenoms {
            protected Object get(AnoGenParcoursRowImpl obj) {
                return obj.getPrenoms();
            }

            protected void put(AnoGenParcoursRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Numero {
            protected Object get(AnoGenParcoursRowImpl obj) {
                return obj.getNumero();
            }

            protected void put(AnoGenParcoursRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Anonymat {
            protected Object get(AnoGenParcoursRowImpl obj) {
                return obj.getAnonymat();
            }

            protected void put(AnoGenParcoursRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected abstract Object get(AnoGenParcoursRowImpl object);

        protected abstract void put(AnoGenParcoursRowImpl object, Object value);

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    ADFContext adfCtx = ADFContext.getCurrent();
    Map sessionFlowScope = adfCtx.getSessionScope();
    Long cal = Long.parseLong(sessionFlowScope.get("id_calendrier").toString());

    private static final String ALGO = "AES";
    private byte[] keyvalue;
    String parcours = sessionFlowScope.get("id_niv_form_parcours").toString();
    String sess = sessionFlowScope.get("id_session").toString();
    String sem = sessionFlowScope.get("id_smstre").toString();
    String an = sessionFlowScope.get("id_annee").toString();


    public static final int IDETUDIANT = AttributesEnum.IdEtudiant.index();
    public static final int NOM = AttributesEnum.Nom.index();
    public static final int PRENOMS = AttributesEnum.Prenoms.index();
    public static final int NUMERO = AttributesEnum.Numero.index();
    public static final int ANONYMAT = AttributesEnum.Anonymat.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AnoGenParcoursRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute IdEtudiant.
     * @return the IdEtudiant
     */
    public Long getIdEtudiant() {
        return (Long) getAttributeInternal(IDETUDIANT);
    }

    /**
     * Gets the attribute value for the calculated attribute Nom.
     * @return the Nom
     */
    public String getNom() {
        return (String) getAttributeInternal(NOM);
    }

    /**
     * Gets the attribute value for the calculated attribute Prenoms.
     * @return the Prenoms
     */
    public String getPrenoms() {
        return (String) getAttributeInternal(PRENOMS);
    }

    /**
     * Gets the attribute value for the calculated attribute Numero.
     * @return the Numero
     */
    public String getNumero() {
        return (String) getAttributeInternal(NUMERO);
    }

    /**
     * Gets the attribute value for the calculated attribute Anonymat.
     * @return the Anonymat
     */
    public String getAnonymat() {
        String decrypted="";
        String key = getParcours() + "" + getSess() + "" + getSem() + "" + getAn() + "" + getAn() + "" +
        getSem() + "" + getSess() + "" + getParcours() + "" + getSem() + "" + getSess() + "" + getParcours() +
        "" + getAn() + "" + getSess() + "" + getParcours() + "" + getAn() + "" + getSem();
        String val_key = key.substring(0, 16);
        String crypte = (String) getAttributeInternal(ANONYMAT);
        //String crypte = getAnonymatEncryte(Long.parseLong(getEtudiantInscrisROVO().getAttribute("IdEtudiant").toString()), Long.parseLong(getParcours()), Long.parseLong(getAn()), Long.parseLong(getSem()), Long.parseLong(getSess()));
        try {
            decrypted = decryptAnonymat((String) crypte,val_key);
            
        }catch (Exception e) {
        }
        return decrypted;
        //return (String) getAttributeInternal(ANONYMAT);
    }
    public String decryptAnonymat(String encdata, String keys ) throws Exception {
        keyvalue = keys.getBytes();
        Key key = new SecretKeySpec(keyvalue, ALGO);
        //Key key = generateKey();
        Cipher c = Cipher.getInstance(ALGO);
        c.init(Cipher.DECRYPT_MODE, key);
        @SuppressWarnings("oracle.jdeveloper.java.semantic-warning")
        byte[] decodedValue = new BASE64Decoder().decodeBuffer(encdata);
        byte[] decVal = c.doFinal(decodedValue);
        String decryptValue = new String(decVal);
        return decryptValue;
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

