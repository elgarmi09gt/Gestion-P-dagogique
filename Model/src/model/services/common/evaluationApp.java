package model.services.common;

import java.math.BigDecimal;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import java.util.Map;

import java.util.Set;

import model.entities.java.EtudiantsEcs;
import model.entities.java.EudiantsUes;
import model.entities.java.ReclamationNote;
import model.entities.java.Ue;

import model.updatableview.common.TableEtudiantsemestre;

import model.readOnlyView.common.RValidation;

import oracle.jbo.ApplicationModule;
import oracle.jbo.RowSetIterator;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Oct 13 09:07:23 UTC 2020
// ---------------------------------------------------------------------
public interface evaluationApp extends ApplicationModule {

    void InitialiserNoteModeEns(Integer fil_ue_sem_ec, Integer calendrier_deliberation, Integer utilisateur);

    void initialiserNoteModeEnsFiliere(Integer anne_univers, Integer niv_fomr_parcours, Integer session_id,
                                       Integer utilisateur);


    Integer isCosedAllSemestre(Integer parcours, Integer annee, Integer session);


    RowSetIterator DeliberationAnnuelle(Integer anne, Integer parcours, Integer session);

    void calculMoyenneSemestrielle(Long calendrier, Long utilisateur);


    Integer isDelibratedSemestre(Long parcours, Long calendrier);


    Integer clotureSaisieNotesInter(Long fil_sem_ec, Long type_control, Long mode_control, Long calendrier,
                                    String action, Long utilisateur);


    void findAndUpdateNote(Long idNoteModeEns, Float note);


    void getNotesEtudiants(Long type_ctrl_ec, Long id_cal_del);

    void getNotesEtudiantsModeEns(Long type_ctrl, Long id_cal_del);

    Integer isClosedSaisieNotesInter(Long fil_sem_ec, Long type_control, Long mode_control, Long calendrier);

    Integer nbrColonneUe();


    Integer clotureUe(Long fil_ue, Long calendrier, String action, Long utilisateur);


    Integer isClosedUe(Long fileUesem, Long calendrier);


    Integer deliberationUe(Long fil_ue, Long calendrier, String action, Long utilisateur);


    //void calculMoyenneSemestrielle(Long calendrier, Long utilisateur);

    //Integer clotureSemestre(Long parcours, Long calendrier, Long semestre, String action, Long utilisateur);

    //Integer isClosedAnnee(Long parcours, Long calendrier);

    Integer isClosedSemestre(Long parcours, Long calendrier);

    //Integer isDelibratedSemestre(Long parcours, Long calendrier);


    void calculMoyenneUe(Integer calendrier, Integer fileUesem, Integer utilisateur);


    List<Long> addSelectedToGroupe();

    List<Long> getSelectedNiveauFormations();

    List<Long> getSelectedUsers();

    List<Long> getSelectedUes();

    List<Long> getSelectedEcs();

    List<Long> getSelectedJury();

    void UpdateRole(Integer idUser, Integer idJury, String role, Integer utimodif);

    void UpdateResponsableEc(Integer idUser, Integer idFilEc, String role, Integer utimodif, Integer id_uti_fil_ec);

    void UpdateResponsableUe(Integer idUser, Integer idFilUe, String role, Integer utimodif, Integer id_uti_fil_ue);


    void compenser(Integer parcours, Integer anne, Integer calendrier, Integer utilisateur);


    List<Long> getSelectedLois();

    List<Long> getSelectedParcours();

    void initAno(Integer id_ano);

    void CalculMoyenneEcFinalProc(Integer anne, Integer semestre, Integer parcours, Integer fileUesem,
                                  Integer idFilieUeSemEc, Integer calendrDelib, Integer utilisateur);

    void SortByCredit(Integer credit1, Integer credit2);

    void SortByMoyenne(Integer moyenne1, Integer moyenne2);

    void calculMoyenneEc(Integer anne, Integer semestre, Integer parcours, Integer fileUesem, Integer idFilieUeSemEc,
                         Integer typeControle, Integer calendrDelib, Integer utilisateur);

    void reconduireRedoublantToSess2(Integer anne_univers, Integer niv_fomr_parcours, Integer session_id,
                                     Integer utilisateur);

    void CalculMoyenneAnnuel(Integer anne_univers, Integer parcours, Integer utilisateur);

    Integer getIdAnonymat(Long parcours, Long anne, Long semestre, Long sessions);

    Integer isGenereAnonymat(Long parcours, Long anne, Long semestre, Long sessions);

    void deleteRuleNivParc(Integer id_niv_reg_parc);


    void reconduireToSess2(Integer anne_univers, Integer niv_fomr_parcours, Integer session_id, Integer semestre_id,
                           Integer utilisateur);

    Integer reouvrirSaisieNotes(Long parcours, Long fil_ue, Long fil_sem_ec, Long type_control, Long calendrier,
                                Long utilisateur);

    Integer reouvrirSaisieNotesInter(Long parcours, Long fil_ue, Long fil_sem_ec, Long type_control, Long mode_control,
                                     Long calendrier, Long utilisateur);

    Integer isJuryDefined(Integer parcours, Integer annee, Integer sess, Integer semestre);

    void traitementEnjambiste(Integer niv_fomr_parcours, Integer anne_univers, Integer utilisateur);

    void UpdateFormationAccess(Integer id_acces, String role, Integer utimodif);

    void DeleteFormationAccess(Integer id_acces);

    void AllowRoleTo(Integer role_id, Integer uti_id, Integer uticre);

    void UpdateUserRole(Integer user_role_id, Integer uti_id, Integer uti_modif);

    void RepecheUECriteria(Long calendrier, BigDecimal superieur, BigDecimal inferieur);

    void refreshJury(Integer parcours_id);

    List<Long> getSelectedFormations();

    void UpdateResponsableFormation(Integer idUser, Integer idFormation, String role, Integer utimodif,
                                    Integer id_uti_formation);

    void UpdateRoleNivFormation(Integer idUser, Integer idNivFormation, String role, Integer utimodif,
                                Integer id_uti_niv_formation);


    List<Long> getSelectedUserFor();

    Integer closeAllUe(Integer parcours, Integer calendrier, Integer semestre, String action, Integer utilisateur);

    List<Long> getSelectedRole();

    List<Long> getSelectedFonction();


    Integer isCompensRuleDefined(Long parcours, Integer annee);


    void findAndUpdateNoteInter(Long idNoteModeEnsInter, Float note, String uti_modif);


    void Initialiser(Long prcrs_mq_an_id, Long calendrier, Long utilisateur);


    Long CreateOrUpdateJury(Long niv_prcrs_id, Long sem_id, Long an_id, Long utilisateur);


    String GetNoteModeEnsInter(Long parcours, Long calendrier, Long mde_cntrl_ec, Long inspedue);

    Long getCalSess2(Long annee, Long semestre, Long parcours);


    void UpdateResultat(Integer anne_univers, Integer parcours, Integer formation, Integer utilisateur);


    Integer getInsc(Long pma);


    void FindAndUpdateNote(Long id_mode_ctrl_ec, Long calendrier, Long id_type_ctrl, String numero, Float note,
                           Long utilisateur);


    Integer reouvrirFilUe(Long parcours, Long fil_ue, Long calendrier, Long utilisateur);

    Integer reouvrirInter(Long fil_sem_ec, Long type_control, Long mode_control, Long calendrier, Long utilisateur);

    Integer reouvrirPrcrsAn(Long parcours, Long calendrier, Long utilisateur);


    void RepecherMention(Long result_sem, Integer ref_moyenne, Long calendrier, Long utilisateur);

    void RepecherSemestre(Long result_sem, Integer ref_moyenne, Long calendrier, Long utilisateur);


    Integer isSoutenableUeExist(Long calendrier, Long parcours);


    Integer getTotalCoefEcInvalid(Long fil_ue, Long inspedUe, Long calendrier, BigDecimal moyenne_valid);

    Integer getTotalCoefUe(Long fil_ue);


    Integer getTotalCoefUENonValid(Long inspedSem, Long calendrier, BigDecimal moyenne_valid);


    Integer getNbreControle(Long fil_ec, Long type_cntrl, Long prcrs_maq);

    void DupliquerNote(Long calendrier, Long fil_ue, Long fil_ec, Long type_cntrl, Long mode_cntrl_ec, Long prcrs_mq,
                       Long utilisateur);


    void AllowAcessFusFecTo(Long prcrs_id, Long annee_id, Long sem_id, Long pdt_id, Long user_id);


    void createUserJury(Long idjury, Long id_user, String role_, Long utilisateur);


    void UpdateInscription(Long prcrs, Long annee, Long utilisateur);


    void CalculerMoyenneAnnuelle(Long annee, Long sess, Long parcours, Long utilisateur);


    Long isMaquetteValide(Long parcours, Long anne, Long maquette);

    Integer isCompensedSemestre(Long parcours_maq, Integer calendrier);


    Integer isClosedAllUe(Long parcours_maq, Integer calendrier, Integer semestre);


    void DelibererSemestre(Long calendrier, Long parcours_maq, Long utilisateur);

    Integer delibererSemestre(Long parcours_maq, Integer calendrier, Integer semestre, String action,
                              Integer utilisateur);


    void Compenser(Long calendrier, Long prcrs_maq, Long utilisateur);

    Integer CompenserSemestre(Long prcrs_maq, Integer calendrier, String action, Integer utilisateur);


    void UpdateResultatSemAdm(Long prcrs_maq, Long utilisateur);


    Integer isAllUeClosed(Long prcrs_maq, Integer calendrier, Integer semestre);


    Integer publishSemestre(Long prcrs_maq, Integer calendrier, String action, Integer utilisateur);


    void ReconduireToSession2(Long calendrier, Long parcours_maq, Long utilisateur);


    Integer isPublishedAllSemestre(Long parcours_maq, Long sess);


    void UpdateEnjembiste(Long annee, Long parcours, Long formation, Long utilisateur);


    Integer reouvrirPrcrsSem(Long parcours_maq, Long calendrier, Long utilisateur);


    void CloseSaisieCCSess2(Long parcours_maq, Long semestre, Long calsess2, Long utilisateur);


    void CalculerMoyenneEc(Long calendrier, Long parcours_maq, Long fil_ec, Long utilisateur);

    void CalculerMoyenneEcTypeControle(Long calendrier, Long parcours_maq, Long fil_ec, Long type_cntrl,
                                       Long utilisateur);

    void DelibererUe(Long calendrier, Long parcours_maq, Long fil_ue, Long utilisateur);


    Integer closeSemestre(Long parcours_maq, Integer calendrier, String action, Integer utilisateur);


    void DelibererAnnee(Long annee, Long parcours_maq, Long formation, Long utilisateur);


    Long FindAndUpdateNoteEtd(Long id_mode_ctrl_ec, Long calendrier, Long id_type_ctrl, String numero, Float note,
                              Long utilisateur);

    void ClearNote(Long id_mode_ctrl_ec, Long calendrier, Long id_type_ctrl, String numero, Long utilisateur);


    void RepecherUe(Long calendrier, Long fil_ue, BigDecimal moyenne_valid, Long inspedUe, Long inspedSem,
                    Long prcrs_maq, Long utilisateur);


    void RepecherUeMed(Long parcours_maq, Long inspedSem, Long inspedUe, Long calendrier, Long fil_ue, Long fil_ec,
                       Long utilisateur);

    Integer ClosedUe(Integer fil_ue, Integer calendrier, String action, Integer utilisateur, Long prcrs_maq);

    Integer delibereUe(Integer fil_ue, Integer calendrier, String action, Integer utilisateur, Long prcrs_maq);


    Integer isCosedUe(Integer fil_ue, Integer calendrier, Long prcrs_maq);

    Integer clotureEcUe(Integer fil_ue, Integer calendrier, String action, Integer utilisateur, Long prcrs_maq);

    Integer isDelibrateUe(Long fileUesem, Long calendrier, Long prcrs_maq);


    Integer clotureSaisieNotes(Long fil_sem_ec, Long type_control, Long calendrier, String action, Long utilisateur,
                               Long prcrs_maq);

    Integer isClosedSaisieNotes(Long fil_sem_ec, Long type_control, Long calendrier, Long prcrs_maq);

    Integer isCosedAllNoteModeEns(Integer fil_ue, Integer calendrier, Long prcrs_maq);


    Integer isEcAccessAllowed(Long filiere_ec_id, Long prcrs_maq, Long utilisateur);


    Integer reouvrirFilEc(Long fil_ue, Long fil_sem_ec, Long type_control, Long calendrier, Long utilisateur,
                          Long prcrs_maq);

    Integer getTotalCoef(Long calendrier, Long prcrs_maq);


    Integer repecherSemestre(Long parcours_maq, Long calendrier, String action, Long utilisateur);

    void RepechSem(Long calendrier, BigDecimal moyenne_valid, Long inspedSem, Long prcrs_maq, Long utilisateur);


    void ChargerNoteAnc(Long calendrier, Long parcours, String codifUe, Long code_ec, Long sess, Long type_cntrle,
                        Long utilisateur);


    Integer isAllFilEcComplexe(Long parcours_maq, Long fil_ue);

    Integer isDiplomante(Long parcours_maq);

    Integer isFilUeComplexe(Long parcours_maq, Long fil_ue);


    Long isPrcrsAttSpecExist(Long parcours_maq);


    Integer getEtatDeliberation(Long parcours_maq, Integer calendrier);


    String getNoteEc(String p_num, Long p_fil_ue, Long p_calendrier, Long p_fec, Long p_prcrs_maq);


    void UpdateResultatCycle(Long code_fr, Long parcours_maq, Long annee, Integer utilisateur);


    EudiantsUes getEtudiantUe(Long an_id, Long sem_id, Long prcrs_maq_id, Long sess_id);


    EtudiantsEcs getEtudiantEc(Long anId, Long semId, Long prcrsIaqId, Long sessId, Long filUeId);


    EtudiantsEcs getEtudiantUeEc(Long anId, Long userId, Long semId, Long pmaId, Long sessId);


    void RenoncerNote(Long p_etd_id, Long p_prcrs_maq, Long p_fil_ec, Long p_uti, String p_date);


    Integer getNbreNivSup(Long niv_sec);


    void ChargerResultatSpec(Long prcrs_maq_id, Long code_niv_sec, Long code_niv_sec_sup, Long an_id, Long sess_id);


    Integer isClosedAnnee(Long parcours_pma, Long session_id);

    Integer IsDelibarateAn(Long parcours_maq, Long session_id);

    Integer Deliberer(Integer parcours_maq, Integer session_id, String action, Integer utilisateur);


    Integer publierAnnee(Long parcours_maq, Long session_id, String action, Integer utilisateur);


    Integer cloturerAnnee(Long parcours_maq, Long session_id, String action, Integer utilisateur);

    Integer IsClosedAn(Long parcours_maq, Long session_id);


    Integer publierUe(Long fil_ue, Long parcours_maq, Long calendrier, String action, Long utilisateur);

    void DupliquerNoteSess2(Long calendrier, Long fil_ec, Long prcrs_mq, Long utilisateur);


    Integer isDelibSemestre(Long prcrsMaqId, Long semId, Long anId, Long sessId);

    Integer getPrcrsMaquette(Long parcoursId, Long maquetteId, Long anneeId);

    void getEtudiantSansNote();


    void resetEtudiantSansNote();

    Integer getCompensationRule(Long cal_id);

    void clearData(Long prcrs_maq_id);


    void insertData(Long prcrs_maq_id, Integer uti_id);

    void insertTemps(String num_, String pnom_, String nom_, String dnaiss_, String lnaiss_, String nat_, String civ_,
                     String sex_, String tel_, String prt_, String einst_, String epers_, String cin_, Long pma_);

    void UpdateIsAbsent(Long parcours_maq, Long calendrier_id, Long ips_id, Integer utilisateur);


    void DelibererDetailNote(Long parcours_maq, Long calendrier_id, Long ips_id, Integer utilisateur);

    Integer cloturerReclamation(Long parcours_maq, Long calendrier, Long utilisateur);


    void ChargerResultat(Long prcrs_maq_id, Long code_niv_sec, Long an_id, Long sess_id, String op_code_sup);


    void ChargerResultatEtuOpt(Long prcrs_maq_id, Long code_niv_sec, Long code_niv_sec_sup, Long an_id, Long sess_id,
                               String p_num, String op_code);


    List<ReclamationNote> callApiWithUnnamedParams(String nivsec, String an, String sem);

    void sendEmail(String to, String subject, String body);

    void UpdateIsToPublish(Long calendrier_id, Long ips_id);


    void DelibDetailsNote();


    void DeliReclamation(Long parcours_maq, Long calendrier_id);

    void UpdateIsAbs(Long parcours_maq, Long calendrier_id);

    void DelibererDefSemestre(Long parcours_maq, Long calendrier_id);


    Integer isAllUe2Closed(Long parcours_maq, Integer calendrier, Integer semestre);


    void saveDateSoutenance(Long etu_id, Long prcrs_maq_id, Long u_id, String d_id);


    void ChargerResultatRdbt(Long prcrs_maq_id, Long code_niv_sec, Long an_id, Long sess_id, String op_code);

    Map<Long, Long> getSelectedFilEcPrcrs();

    HashMap<String, String> getSelectedFiliereUePrcrs();

    Integer openDoc(Long prcrs_maq_id, Long sess_id);

    Integer IsOpenDoc(Long parcours_maq, Long session_id);
}
