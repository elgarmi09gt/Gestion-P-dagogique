package model.readOnlyView;

import java.math.BigDecimal;

import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue May 11 12:31:02 GMT 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class InfoExonerationAnterieurROVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        LibAnnee {
            protected Object get(InfoExonerationAnterieurROVORowImpl obj) {
                return obj.getAttributeInternal(index());
            }

            protected void put(InfoExonerationAnterieurROVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        IdMotifExoneration {
            protected Object get(InfoExonerationAnterieurROVORowImpl obj) {
                return obj.getAttributeInternal(index());
            }

            protected void put(InfoExonerationAnterieurROVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        IdNatureExoneration {
            protected Object get(InfoExonerationAnterieurROVORowImpl obj) {
                return obj.getAttributeInternal(index());
            }

            protected void put(InfoExonerationAnterieurROVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        IdTypeExoneration {
            protected Object get(InfoExonerationAnterieurROVORowImpl obj) {
                return obj.getAttributeInternal(index());
            }

            protected void put(InfoExonerationAnterieurROVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Montant {
            protected Object get(InfoExonerationAnterieurROVORowImpl obj) {
                return obj.getAttributeInternal(index());
            }

            protected void put(InfoExonerationAnterieurROVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        RefExo {
            protected Object get(InfoExonerationAnterieurROVORowImpl obj) {
                return obj.getAttributeInternal(index());
            }

            protected void put(InfoExonerationAnterieurROVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Taux {
            protected Object get(InfoExonerationAnterieurROVORowImpl obj) {
                return obj.getAttributeInternal(index());
            }

            protected void put(InfoExonerationAnterieurROVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LibForm {
            protected Object get(InfoExonerationAnterieurROVORowImpl obj) {
                return obj.getAttributeInternal(index());
            }

            protected void put(InfoExonerationAnterieurROVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        DroitInsAdm {
            protected Object get(InfoExonerationAnterieurROVORowImpl obj) {
                return obj.getAttributeInternal(index());
            }

            protected void put(InfoExonerationAnterieurROVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        DroitInsPed {
            protected Object get(InfoExonerationAnterieurROVORowImpl obj) {
                return obj.getAttributeInternal(index());
            }

            protected void put(InfoExonerationAnterieurROVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CoutFormation {
            protected Object get(InfoExonerationAnterieurROVORowImpl obj) {
                return obj.getAttributeInternal(index());
            }

            protected void put(InfoExonerationAnterieurROVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MotifExonerationVO1 {
            protected Object get(InfoExonerationAnterieurROVORowImpl obj) {
                return obj.getAttributeInternal(index());
            }

            protected void put(InfoExonerationAnterieurROVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        NatureExonerationVO1 {
            protected Object get(InfoExonerationAnterieurROVORowImpl obj) {
                return obj.getAttributeInternal(index());
            }

            protected void put(InfoExonerationAnterieurROVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TypeExonerationVO1 {
            protected Object get(InfoExonerationAnterieurROVORowImpl obj) {
                return obj.getAttributeInternal(index());
            }

            protected void put(InfoExonerationAnterieurROVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected abstract Object get(InfoExonerationAnterieurROVORowImpl object);

        protected abstract void put(InfoExonerationAnterieurROVORowImpl object, Object value);

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int LIBANNEE = AttributesEnum.LibAnnee.index();
    public static final int IDMOTIFEXONERATION = AttributesEnum.IdMotifExoneration.index();
    public static final int IDNATUREEXONERATION = AttributesEnum.IdNatureExoneration.index();
    public static final int IDTYPEEXONERATION = AttributesEnum.IdTypeExoneration.index();
    public static final int MONTANT = AttributesEnum.Montant.index();
    public static final int REFEXO = AttributesEnum.RefExo.index();
    public static final int TAUX = AttributesEnum.Taux.index();
    public static final int LIBFORM = AttributesEnum.LibForm.index();
    public static final int DROITINSADM = AttributesEnum.DroitInsAdm.index();
    public static final int DROITINSPED = AttributesEnum.DroitInsPed.index();
    public static final int COUTFORMATION = AttributesEnum.CoutFormation.index();
    public static final int MOTIFEXONERATIONVO1 = AttributesEnum.MotifExonerationVO1.index();
    public static final int NATUREEXONERATIONVO1 = AttributesEnum.NatureExonerationVO1.index();
    public static final int TYPEEXONERATIONVO1 = AttributesEnum.TypeExonerationVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public InfoExonerationAnterieurROVORowImpl() {
    }
}

