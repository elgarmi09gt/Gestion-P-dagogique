package model.readOnlyView;

import java.sql.ResultSet;

import java.sql.SQLException;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import oracle.adf.model.BindingContext;

import oracle.adf.model.binding.DCIteratorBinding;

import oracle.binding.AttributeBinding;
import oracle.binding.BindingContainer;
import oracle.binding.OperationBinding;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Apr 29 10:50:21 GMT 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SaisieResultModImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public SaisieResultModImpl() {
    }

    private ArrayList<Map<String, String>> employeeList;

    /**
     * Overriden view object's method.
     */
    //create
    protected void create() {
        super.reset();
        super.create();
        

        // Wipe out all traces of a query for this VO
        getViewDef().setQuery(null);
        getViewDef().setSelectClause(null);
        setQuery(null);
    }

    /**
     * executeQueryForCollection - for custom java data source support.
     */
    public BindingContainer getBindings() {
        return (BindingContainer) BindingContext.getCurrent().getCurrentBindingsEntry();
    }
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        AttributeBinding id_parc_maq = (AttributeBinding) getBindings().getControlBinding("IdParcoursMaquetAnnee");
        AttributeBinding id_grade = (AttributeBinding) getBindings().getControlBinding("IdGrade");
        AttributeBinding id_type_form = (AttributeBinding) getBindings().getControlBinding("IdTypeFormation");
        AttributeBinding id_annee = (AttributeBinding) getBindings().getControlBinding("IdAnneesUnivers1");
        System.out.println(" id_parc_maq "+id_parc_maq.getInputValue()+" id_grade"+id_grade+"id_type_form "+id_type_form+"id_annee "+id_annee);
        OperationBinding getIsteEtudiantInsc = getBindings().getOperationBinding("getIsteEtudiantInsc");
        getIsteEtudiantInsc.getParamsMap().put("id_parc_maq",  Long.parseLong(id_parc_maq.getInputValue().toString()));   
        getIsteEtudiantInsc.getParamsMap().put("id_grade",  Long.parseLong(id_grade.getInputValue().toString()));  
        getIsteEtudiantInsc.getParamsMap().put("id_type_form",  Long.parseLong(id_type_form.getInputValue().toString()));  
        getIsteEtudiantInsc.getParamsMap().put("id_annee",  Long.parseLong(id_annee.getInputValue().toString()));  
        getIsteEtudiantInsc.getParamsMap().put("id_etat_insc",  Long.parseLong("21"));      // 22 pour les etudiants ayant commme etat insc definitif
        getIsteEtudiantInsc.execute();
        
        DCIteratorBinding iter = (DCIteratorBinding) getBindings().get("ListePersSaisieResultatROIterator");        
        RowSetIterator rsi = iter.getViewObject().createRowSetIterator(null);
        Integer les_insc = 0;
        employeeList = new ArrayList<Map<String, String>>();
        while (rsi.hasNext()) {
            Row nextRow = rsi.next();
            Map<String, String> employeeData = new HashMap<String, String>();
            
            System.out.println("name "+nextRow.getAttribute("Nom"));
            employeeData.put("nom", "diop");
            employeeList.add(employeeData);
        }
        setFetchPos(qc, 0);

        super.executeQueryForCollection(qc, params, noUserParams);
        
        /*Map<String, String> employeeData = new HashMap<String, String>();
        //employeeList = new ArrayList<Map<String, String>>();

        employeeData.put("nom", "diop");
        employeeData.put("prenom", "John");
        //employeeData.put("surname", "Miller");
        employeeList.add(employeeData);

        employeeData = new HashMap<String, String>();
        employeeData.put("nom", "Sy");
        employeeData.put("prenom", "Peter");
        //employeeData.put("surname", "Braun");
        employeeList.add(employeeData);

        setFetchPos(qc, 0);

        super.executeQueryForCollection(qc, params, noUserParams);*/
    }

    /**
     * hasNextForCollection - for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean hasNext = getFetchPos(qc) < employeeList.size();

        return hasNext;
    }

    /**
     * createRowFromResultSet - for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        int pos = getFetchPos(qc);

        SaisieResultModRowImpl empRow = (SaisieResultModRowImpl) createNewRowForCollection(qc);

        empRow.setnom(employeeList.get(pos).get("nom"));
        empRow.setprenom(employeeList.get(pos).get("prenom"));
        //empRow.setSurname(employeeList.get(pos).get("surname"));SaisieResultMod

        setFetchPos(qc, pos + 1);

        return empRow;
    }

    /**
     * getQueryHitCount - for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }
    
    protected void releaseUserDataForCollection(Object qc, Object rs) {
        ResultSet udc = (ResultSet) getUserDataForCollection(qc);
        if (udc != null) {
            try {
                udc.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        super.releaseUserDataForCollection(qc, rs);
    }
    
    private void setFetchPos(Object rowset, int pos) {
        if (pos == employeeList.size()) {
            setFetchCompleteForCollection(rowset, true);
        }
        setUserDataForCollection(rowset, new Integer(pos));
    }

    private int getFetchPos(Object rowset) {
        return ((Integer) getUserDataForCollection(rowset)).intValue();
    }


}

