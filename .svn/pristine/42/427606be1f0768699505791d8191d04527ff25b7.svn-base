package model.readOnlyView;

import model.readOnlyView.common.DelibSemEtudiantROVO;

import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;
import java.util.List;
import java.util.ArrayList;

import oracle.jbo.RowSet;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Nov 24 11:03:55 UTC 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DelibSemEtudiantROVOImpl extends ViewObjectImpl implements DelibSemEtudiantROVO {
    /**
     * This is the default constructor (do not remove).
     */
    public DelibSemEtudiantROVOImpl() {
    }

    /**
     * Returns the bind variable value for parcours.
     * @return bind variable value for parcours
     */
    public Integer getparcours() {
        return (Integer) getNamedWhereClauseParam("parcours");
    }

    /**
     * Sets <code>value</code> for bind variable parcours.
     * @param value value to bind as parcours
     */
    public void setparcours(Integer value) {
        setNamedWhereClauseParam("parcours", value);
    }

    /**
     * Returns the bind variable value for sem.
     * @return bind variable value for sem
     */
    public Integer getsem() {
        return (Integer) getNamedWhereClauseParam("sem");
    }

    /**
     * Sets <code>value</code> for bind variable sem.
     * @param value value to bind as sem
     */
    public void setsem(Integer value) {
        setNamedWhereClauseParam("sem", value);
    }

    /**
     * Returns the bind variable value for annee.
     * @return bind variable value for annee
     */
    public Integer getannee() {
        return (Integer) getNamedWhereClauseParam("annee");
    }

    /**
     * Sets <code>value</code> for bind variable annee.
     * @param value value to bind as annee
     */
    public void setannee(Integer value) {
        setNamedWhereClauseParam("annee", value);
    }

    /**
     * Returns the bind variable value for sess.
     * @return bind variable value for sess
     */
    public Integer getsess() {
        return (Integer) getNamedWhereClauseParam("sess");
    }

    /**
     * Sets <code>value</code> for bind variable sess.
     * @param value value to bind as sess
     */
    public void setsess(Integer value) {
        setNamedWhereClauseParam("sess", value);
    }
    
    public List<String> addSelectedTo() {
            List<String> etulists = new ArrayList<>();
            System.out.println("ok");
            //create a second row set to not impact the row set
            //used in ADF
            RowSet duplicateRowSet = this.createRowSet("duplicateRowSet");
            //set rowset to first row to avoid "attempt to access
            //dead row" exception
            duplicateRowSet.first();
            //get the current row of the table to set it back after
            //re-executing the VO
            Row currentRow = this.getCurrentRow();
            boolean currentRowAdded = false;
            //get all rows that have the transoent attribute
            //"MarkForDelete" set to true
            Row[] rowsToAdd = duplicateRowSet.getFilteredRows("SelectedStudent", true);
            if (rowsToAdd.length > 0) {
                //only run throizgh this code if there is something to
                //delete
                for (Row rw : rowsToAdd) {
                    //if row is ts marked as the current in VO, set
                    //boolean flag
                    if (rw.getKey().equals(currentRow.getKey())) {
                        currentRowAdded = true;
                    }
                    //remove row - don't yet commit
                    //rw.remove();
                    etulists.add(rw.getAttribute("Numero").toString()) ;
                    System.out.println("IdEtudiant "+rw.getAttribute("IdEtudiant").toString());
                }
                //re-execute VO
                this.executeQuery();
                //reset current row if it hasn't been deleted
                if (!currentRowAdded) {
                    this.setCurrentRow(currentRow);
                }
                duplicateRowSet.closeRowSet();
             }
            return etulists;
        }

    /**
     * Returns the bind variable value for id_fil_ue.
     * @return bind variable value for id_fil_ue
     */
    public Integer getid_fil_ue() {
        return (Integer) getNamedWhereClauseParam("id_fil_ue");
    }

    /**
     * Sets <code>value</code> for bind variable id_fil_ue.
     * @param value value to bind as id_fil_ue
     */
    public void setid_fil_ue(Integer value) {
        setNamedWhereClauseParam("id_fil_ue", value);
    }
}

