package model.readOnlyView;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Apr 14 16:17:35 UTC 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DelibSemFilUeByRespUeROVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        IdFiliereUeSemstre {
            protected Object get(DelibSemFilUeByRespUeROVORowImpl obj) {
                return obj.getIdFiliereUeSemstre();
            }

            protected void put(DelibSemFilUeByRespUeROVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LibelleLong {
            protected Object get(DelibSemFilUeByRespUeROVORowImpl obj) {
                return obj.getLibelleLong();
            }

            protected void put(DelibSemFilUeByRespUeROVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        IdUtilisateur {
            protected Object get(DelibSemFilUeByRespUeROVORowImpl obj) {
                return obj.getIdUtilisateur();
            }

            protected void put(DelibSemFilUeByRespUeROVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected abstract Object get(DelibSemFilUeByRespUeROVORowImpl object);

        protected abstract void put(DelibSemFilUeByRespUeROVORowImpl object, Object value);

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int IDFILIEREUESEMSTRE = AttributesEnum.IdFiliereUeSemstre.index();
    public static final int LIBELLELONG = AttributesEnum.LibelleLong.index();
    public static final int IDUTILISATEUR = AttributesEnum.IdUtilisateur.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DelibSemFilUeByRespUeROVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute IdFiliereUeSemstre.
     * @return the IdFiliereUeSemstre
     */
    public Long getIdFiliereUeSemstre() {
        return (Long) getAttributeInternal(IDFILIEREUESEMSTRE);
    }

    /**
     * Gets the attribute value for the calculated attribute LibelleLong.
     * @return the LibelleLong
     */
    public String getLibelleLong() {
        return (String) getAttributeInternal(LIBELLELONG);
    }

    /**
     * Gets the attribute value for the calculated attribute IdUtilisateur.
     * @return the IdUtilisateur
     */
    public Long getIdUtilisateur() {
        return (Long) getAttributeInternal(IDUTILISATEUR);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

