package processus_inscription;

import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.Serializable;

import java.sql.Connection;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.el.ELContext;

import javax.el.ExpressionFactory;

import javax.el.MethodExpression;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;

import javax.faces.event.ValueChangeEvent;

import javax.servlet.ServletContext;

import oracle.adf.controller.ControllerContext;
import oracle.adf.controller.TaskFlowContext;
import oracle.adf.controller.TaskFlowId;
import oracle.adf.controller.TaskFlowTrainModel;
import oracle.adf.controller.TaskFlowTrainStopModel;
import oracle.adf.controller.ViewPortContext;
import oracle.adf.model.BindingContext;

import oracle.adf.model.binding.DCIteratorBinding;

import oracle.adf.share.ADFContext;

import oracle.adf.view.rich.component.rich.RichPopup;
import oracle.adf.view.rich.component.rich.input.RichSelectBooleanCheckbox;
import oracle.adf.view.rich.component.rich.input.RichSelectItem;
import oracle.adf.view.rich.context.AdfFacesContext;

import oracle.adf.view.rich.event.DialogEvent;

import oracle.adf.view.rich.render.ClientEvent;

import oracle.binding.AttributeBinding;
import oracle.binding.BindingContainer;
import oracle.binding.OperationBinding;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ViewObjectImpl;
import javax.naming.Context;
import javax.naming.InitialContext;

import javax.servlet.ServletContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;

import javax.sql.DataSource;

import model.services.evaluationAppImpl;

import model.services.inscriptionAppImpl;

import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.type.WhenNoDataTypeEnum;
import net.sf.jasperreports.engine.util.JRLoader;

import oracle.adf.model.binding.DCBindingContainer;

public class InscriptionBean implements Serializable{
    
    boolean firstStop = false;
    boolean lastStop = false;
    private RichSelectBooleanCheckbox cocher;
    private List items;
    private ArrayList list = new ArrayList();
    private RichSelectBooleanCheckbox check_all;
    private String taskFlowId = "/inscription/responsable/dynamic-tk-resp.xml#dynamic-tk-resp";
    private String taskFlowId1 = "/inscription/etudiant_bu/dynamic-etud-bu-tk.xml#dynamic-etud-bu-tk";
    Map sessionScope = ADFContext.getCurrent().getSessionScope();
    private String parcours = sessionScope.get("id_niv_form_parcours").toString();
    private String anne_univers = sessionScope.get("id_annee").toString();
    private String session = sessionScope.get("id_session").toString();
    private String utilisateur = sessionScope.get("id_user").toString();
    private String calendrier = sessionScope.get("id_calendrier").toString();
    private String semestre = sessionScope.get("id_smstre").toString();
    private String historique = sessionScope.get("id_hs").toString();
    private RichPopup popup;
    private String taskFlowId2 = "/inscription/paiement_etudiant/dynamic-paiement-tk.xml#dynamic-paiement-tk";
    private String cumul;
    private String dette;

    public InscriptionBean() {
    }
    public List getItems() {
        return list;
    }

    public void setCumul(String cumul) {
        this.cumul = cumul;
    }

    public String getCumul() {
        return cumul;
    }

    public void setDette(String dette) {
        this.dette = dette;
    }

    public String getDette() {
        return dette;
    }

    public void setHistorique(String historique) {
        this.historique = historique;
    }

    public String getHistorique() {
        return historique;
    }

    public void setAnne_univers(String anne_univers) {
        this.anne_univers = anne_univers;
    }

    public String getAnne_univers() {
        return anne_univers;
    }

    public void setUtilisateur(String utilisateur) {
        this.utilisateur = utilisateur;
    }

    public String getUtilisateur() {
        return utilisateur;
    }

    public void setSemestre(String semestre) {
        this.semestre = semestre;
    }

    public String getSemestre() {
        return semestre;
    }

    public void setFirstStop(boolean firstStop) {
        this.firstStop = firstStop;
    }

    public boolean isFirstStop() {
        return firstStop;
    }

    public void setLastStop(boolean lastStop) {
        this.lastStop = lastStop;
    }

    public boolean isLastStop() {
        return lastStop;
    }

    public BindingContainer getBindings() {
        return (BindingContainer) BindingContext.getCurrent().getCurrentBindingsEntry();
    }

    public String validerModifications() {
        // Add event code here...
        OperationBinding operationBinding = getBindings().getOperationBinding("Commit");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            //handle errors if any
            return null;
        }
        FacesMessage msg = new FacesMessage(" Modifications validées avec succes ");
        msg.setSeverity(FacesMessage.SEVERITY_INFO);
        FacesContext.getCurrentInstance().addMessage(null, msg);
        return null;
    }

    public Integer nombreCaseCoche(String bind_interator){
        DCIteratorBinding iter = (DCIteratorBinding) getBindings().get(bind_interator);       
        RowSetIterator rsi = iter.getViewObject().createRowSetIterator(null);
        Integer i = 0;
        while (rsi.hasNext()) {
            Row nextRow = rsi.next();
            if(nextRow.getAttribute("case_cocher")!=null){
                if(Boolean.parseBoolean(nextRow.getAttribute("case_cocher").toString())){
                    System.out.println(nextRow.getAttribute("case_cocher"));
                    i++;
                }
            }
        }
        return i;
    }

    public Integer nombreLigne(String bind_interator){
        DCIteratorBinding iter = (DCIteratorBinding) BindingContext.getCurrent().getCurrentBindingsEntry().get(bind_interator);       
        RowSetIterator rsi = iter.getViewObject().createRowSetIterator(null);
        return rsi.getRowCount();
    }

    // pour retourner vers la page pécédente
    public String autorisePreviousStop() {

        String prevStopAction = null;

        ControllerContext controllerContext = ControllerContext.getInstance();
        ViewPortContext currentViewPortCtx = controllerContext.getCurrentViewPort();
        TaskFlowContext taskFlowCtx = currentViewPortCtx.getTaskFlowContext();
        TaskFlowTrainModel taskFlowTrainModel = taskFlowCtx.getTaskFlowTrainModel();
        TaskFlowTrainStopModel currentStop = taskFlowTrainModel.getCurrentStop();

        TaskFlowTrainStopModel prevStop = taskFlowTrainModel.getPreviousStop(currentStop);
        while(prevStop != null){
            if(isSkipTrainStop(prevStop) == false){
                //no need to loop any further
                prevStopAction = prevStop.getOutcome();
                break;
            }
            prevStop = taskFlowTrainModel.getPreviousStop(prevStop);
        }
        //is either null or has teh value of outcome
        return prevStopAction;
    }

    private boolean isSkipTrainStop(TaskFlowTrainStopModel stop){
        String activityId = stop.getLocalActivityId();
        //get access to the managed bean (HashMap) that keeps track of the
        //train stops that should be skipped
        FacesContext fctx = FacesContext.getCurrentInstance();
        ELContext elctx = fctx.getELContext();
        ExpressionFactory expressionFactory = fctx.getApplication().getExpressionFactory();
        //if you follow a consisting naming scheme for your reusable managed bean, then
        //assumptions as in the code below will always work and simplify your development
        ValueExpression ve = expressionFactory.createValueExpression(elctx,"#{pageFlowScope.beanInsPed}", Object.class);
        BeanInsPed skipHelper = (BeanInsPed) ve.getValue(elctx);
        Boolean skip = (Boolean) skipHelper.get(activityId);
        return skip;
    }

    // pour d'aller vers la page suivante
    public String navigateNextStop() {
        // Add event code here...
        String nextStopAction = null;
        ControllerContext controllerContext = ControllerContext.getInstance();
        ViewPortContext currentViewPortCtx = controllerContext.getCurrentViewPort();
        TaskFlowContext taskFlowCtx = currentViewPortCtx.getTaskFlowContext();
        TaskFlowTrainModel taskFlowTrainModel = taskFlowCtx.getTaskFlowTrainModel();
        TaskFlowTrainStopModel currentStop = taskFlowTrainModel.getCurrentStop();

        TaskFlowTrainStopModel nextStop = taskFlowTrainModel.getNextStop(currentStop);

        while(nextStop != null){
            if(isSkipTrainStop(nextStop) == false){
                //no need to loop any further
                nextStopAction = nextStop.getOutcome();
                break;
            }
            nextStop = taskFlowTrainModel.getNextStop(nextStop);
        }

        //is either null or has the value of outcome
        return nextStopAction;
    }

    public String validerModInsPed() {
        // Add event code here...
        OperationBinding operationBinding1 = getBindings().getOperationBinding("Commit");
        Object result = operationBinding1.execute();
        if (!operationBinding1.getErrors().isEmpty()) {
            //handle errors if any
            //...
            return null;
        }
        else{
            FacesMessage msg = new FacesMessage(" Modification validée avec succes ");
            msg.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }
        return null;
    }


    @SuppressWarnings("unchecked")
    public String onListeInscPed() {
        String nextStopAction = null;
        ControllerContext controllerContext = ControllerContext.getInstance();
        ViewPortContext currentViewPortCtx = controllerContext.getCurrentViewPort();
        TaskFlowContext taskFlowCtx = currentViewPortCtx.getTaskFlowContext();
        TaskFlowTrainModel taskFlowTrainModel = taskFlowCtx.getTaskFlowTrainModel();
        TaskFlowTrainStopModel currentStop = taskFlowTrainModel.getCurrentStop();
        TaskFlowTrainStopModel nextStop = null;
        ADFContext adfCtx = ADFContext.getCurrent();
        Map sessionScope = adfCtx.getSessionScope();
        Map req = adfCtx.getRequestScope();
        sessionScope.get("idpers").toString();
        OperationBinding listeInsPed = getBindings().getOperationBinding("ExecuteWithParamsListInsPed");
        listeInsPed.getParamsMap().put("annee", Long.parseLong(sessionScope.get("id_annee").toString()));
        listeInsPed.getParamsMap().put("idpers", Long.parseLong(sessionScope.get("idpers").toString()));
        listeInsPed.execute();
        
        DCIteratorBinding iter = (DCIteratorBinding) BindingContext.getCurrent().getCurrentBindingsEntry().get("listeInsPedIterator");
        RowSetIterator rsi = iter.getViewObject().createRowSetIterator(null);

        if(rsi.getRowCount()==0){
            FacesMessage msg = new FacesMessage(" Aucune inscription Pédagogique pour l'étudiant ! ");
            msg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }
        else{
            nextStop = taskFlowTrainModel.getNextStop(currentStop);
            if(nextStop != null){
                if(isSkipTrainStop(nextStop) == false){
                    //no need to loop any further
                    nextStopAction = nextStop.getOutcome();
                    //break;
                }
                nextStop = taskFlowTrainModel.getNextStop(nextStop);
            }
        }
        return nextStopAction;
    }

    @SuppressWarnings("unchecked")
    public String onChoiseInsPed() {
        // Add event code here...       
        ADFContext adfCtx = ADFContext.getCurrent();
        Map sessionScope = adfCtx.getSessionScope();
        String nextStopAction = null;
        ControllerContext controllerContext = ControllerContext.getInstance();
        ViewPortContext currentViewPortCtx = controllerContext.getCurrentViewPort();
        TaskFlowContext taskFlowCtx = currentViewPortCtx.getTaskFlowContext();
        TaskFlowTrainModel taskFlowTrainModel = taskFlowCtx.getTaskFlowTrainModel();
        TaskFlowTrainStopModel currentStop = taskFlowTrainModel.getCurrentStop();

        TaskFlowTrainStopModel nextStop = null;
        
        DCIteratorBinding iter = (DCIteratorBinding) BindingContext.getCurrent().getCurrentBindingsEntry().get("listeInsPedIterator");       
        RowSetIterator rsi = iter.getViewObject().createRowSetIterator(null);

        if(nombreCaseCoche("listeInsPedIterator")!=1){
                FacesMessage msg = new FacesMessage(" Veuillez sélectionner une inscription Pédagogique pour continuer ! ");
                msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, msg);
        }
        else{
            while (rsi.hasNext()) {
                Row nextRow = rsi.next();
                if(nextRow.getAttribute("case_cocher")!=null){
                    if(Boolean.parseBoolean(nextRow.getAttribute("case_cocher").toString())){
                        OperationBinding obndAdmPed = getBindings().getOperationBinding("ExecuteWithParams");                       
                        obndAdmPed.getParamsMap().put("id_ins_ped",  Long.parseLong(nextRow.getAttribute("IdInscriptionPedagogique").toString())); 
                        obndAdmPed.execute();
                        nextStop = taskFlowTrainModel.getNextStop(currentStop);
                        if(nextStop != null){
                            if(isSkipTrainStop(nextStop) == false){
                                //no need to loop any further
                                nextStopAction = nextStop.getOutcome();
                                //break;
                            }
                            nextStop = taskFlowTrainModel.getNextStop(nextStop);
                        }
                        
                    }
                }
            }
        }
        return nextStopAction;
    }

    public String onValiderModifInsPed() {
        // Add event code here...
        OperationBinding operationBinding = getBindings().getOperationBinding("Commit");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            //handle errors if any
            return null;
        }
        else{
            FacesMessage msg = new FacesMessage(" Modifications de l'inscription Pédagogique validées avec succes ");
            msg.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }
        
        return null;
    }

    @SuppressWarnings("unchecked")
    public String onNextInscPed() {
        // Add event code here...
        ADFContext adfCtx = ADFContext.getCurrent();
        Map sessionScope = adfCtx.getSessionScope();
        String nextStopAction = null;
        ControllerContext controllerContext = ControllerContext.getInstance();
        ViewPortContext currentViewPortCtx = controllerContext.getCurrentViewPort();
        TaskFlowContext taskFlowCtx = currentViewPortCtx.getTaskFlowContext();
        TaskFlowTrainModel taskFlowTrainModel = taskFlowCtx.getTaskFlowTrainModel();
        TaskFlowTrainStopModel currentStop = taskFlowTrainModel.getCurrentStop();

        TaskFlowTrainStopModel nextStop = null;
        
        AttributeBinding id_niv_form = (AttributeBinding) getBindings().getControlBinding("IdNiveauFormation");
        AttributeBinding id_insc_ped = (AttributeBinding) getBindings().getControlBinding("IdInscriptionPedagogiqueListeInsc");
        
        
        OperationBinding operationBinding = getBindings().getOperationBinding("Commit");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            //handle errors if any
            return null;
        }
        else{
            DCIteratorBinding iter_insc_ped = (DCIteratorBinding) BindingContext.getCurrent().getCurrentBindingsEntry().get("InscriptionsPedagogiquesIterator");       
            Row row_insc_ped = iter_insc_ped.getCurrentRow();
            if(row_insc_ped != null){
                if(row_insc_ped.getAttribute("EtatInscrEtatInscrId") != null && row_insc_ped.getAttribute("InsEnLigne") != null){
                    if(Integer.parseInt(sessionScope.get("val_insc_en_ligne").toString()) == 0 || Integer.parseInt(sessionScope.get("val_etat_insc").toString()) == 0 || 
                            Integer.parseInt(sessionScope.get("val_paiement").toString()) != 0 || Integer.parseInt(sessionScope.get("val_apte").toString()) != 0 || 
                           Integer.parseInt(sessionScope.get("val_etud_bu").toString()) != 0  || Integer.parseInt(sessionScope.get("val_insc_ped_sem").toString()) == 0)
                    {
                        
                        FacesMessage msg = new FacesMessage(" Inscription Pédagogique non validée :");
                        msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                        FacesContext.getCurrentInstance().addMessage(null, msg);
                        
                        if(Integer.parseInt(sessionScope.get("val_insc_en_ligne").toString()) == 0){
                            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(" --> L'étudiant n'a pas effectué l'inscription en ligne"));
                        }
                        if(Integer.parseInt(sessionScope.get("val_etud_bu").toString()) == 0){
                            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(" --> L'étudiant n'est pas en règle avec la BU"));
                        }
                        if(Integer.parseInt(sessionScope.get("val_apte").toString()) == 0 ){
                            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(" --> L'étudiant n'est pas apte"));
                        }
                        if(Integer.parseInt(sessionScope.get("val_paiement").toString()) == 0){
                            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(" --> Le Paiement n'est pas validé"));
                        }
                        if(Integer.parseInt(sessionScope.get("val_etat_insc").toString()) == 0){
                            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(" --> L'état d'incription n'est pas encore finalisé (définitif)"));
                        }
                        if(Integer.parseInt(sessionScope.get("val_insc_ped_sem").toString()) == 0){
                            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(" --> L'étudiant a déjà validé les deux semestres "));
                        }
                        //val_insc_ped_sem

                    }
                    else{
                        /*********************************/
                        //Niveau
                        AttributeBinding niveau = (AttributeBinding) getBindings().getControlBinding("Niveau");
                        AttributeBinding id_etud = (AttributeBinding) getBindings().getControlBinding("IdEtudiant");
                        AttributeBinding id_parc_liste = (AttributeBinding) getBindings().getControlBinding("IdParcoursMaquetAnneeListInsc");
                        List les_semestre = semestreNiv(Integer.parseInt(niveau.getInputValue().toString()));

                        inscriptionAppImpl am = (inscriptionAppImpl)resolvElDC("inscriptionAppDataControl");
                        
                        ViewObject sem_double = am.getSemestreReDoubleRO();
                        sem_double.clearCache();
                        List nombre_sem = new ArrayList();
                        for(int id_semestre = 0; id_semestre < les_semestre.size(); id_semestre++){
                            OperationBinding get_sem_double = getBindings().getOperationBinding("getResultRedouble");
                            get_sem_double.getParamsMap().put("id_parc_maq", id_parc_liste.getInputValue());
                            get_sem_double.getParamsMap().put("id_etud", id_etud.getInputValue());
                            get_sem_double.getParamsMap().put("id_sem", les_semestre.get(id_semestre));
                            get_sem_double.execute();
                            
                            DCIteratorBinding iter = (DCIteratorBinding) BindingContext.getCurrent().getCurrentBindingsEntry().get("SemRedoubleROIterator");        
                            Row row_sem = iter.getCurrentRow();
                            if(row_sem == null){
                                System.out.println("semestre "+les_semestre.get(id_semestre));
                                Row r = sem_double.createRow();                                           
                                r.setAttribute("IdSemestre",les_semestre.get(id_semestre));
                                r.setAttribute("LibelleLong","Semestre "+les_semestre.get(id_semestre));
                                sem_double.insertRow(r); 
                                nombre_sem.add(les_semestre.get(id_semestre));
                            }
                        }

                        //IdSemestreDoub
                        DCIteratorBinding op_iter_sem = (DCIteratorBinding)getBindings().get("SemestreReDoubleROIterator");
                        Row row_op_sem = op_iter_sem.getCurrentRow();
                        System.out.println("row_op_sem "+row_op_sem);
                        System.out.println("lib sem "+row_op_sem.getAttribute("LibelleLong")+" id sem"+row_op_sem.getAttribute("IdSemestre"));
                        OperationBinding op_sem = getBindings().getOperationBinding("getSem");            
                        op_sem.getParamsMap().put("id_sem",  row_op_sem.getAttribute("IdSemestre"));
                        op_sem.execute();
                        
                        OperationBinding opinspedSem = getBindings().getOperationBinding("ExecuteWithParams1");            
                        opinspedSem.getParamsMap().put("id_ins_ped",  Long.parseLong(id_insc_ped.getInputValue().toString()));
                        opinspedSem.getParamsMap().put("id_sem",  row_op_sem.getAttribute("IdSemestre"));     
                        opinspedSem.execute();
                        //InscriptionPedSemestreIterator
                        DCIteratorBinding iter_insc_sem = (DCIteratorBinding)getBindings().get("InscriptionPedSemestreIterator");
                        Row row_insc_sem = iter_insc_sem.getCurrentRow();
                        if(row_insc_sem == null){
                        
                            OperationBinding op_insc_sem_anc = getBindings().getOperationBinding("getInscPedSemAncien");            
                            op_insc_sem_anc.getParamsMap().put("idpers",  Long.parseLong(sessionScope.get("idpers").toString()));
                            op_insc_sem_anc.getParamsMap().put("id_sem",  row_op_sem.getAttribute("IdSemestre"));
                            op_insc_sem_anc.getParamsMap().put("id_niv_form",  id_niv_form.getInputValue());
                            op_insc_sem_anc.execute();
                            DCIteratorBinding iter_insc_sem_anc = (DCIteratorBinding)getBindings().get("InscPedSemAncienROIterator");
                            Row row_insc_sem_anc = iter_insc_sem_anc.getCurrentRow();
                            System.out.println("id_niv_form res");
                            Integer credit_obtenu = 0;
                            Integer credit_dette = 30;
                            Integer credit = 0;
                            System.out.println("id_niv "+row_op_sem.getAttribute("IdSemestre"));
                            AttributeBinding Util = (AttributeBinding) getBindings().getControlBinding("UtiCreePedSem");       
                            AttributeBinding idInsPedSem = (AttributeBinding) getBindings().getControlBinding("IdInscriptionPedagogique1");
                            AttributeBinding id_sem = (AttributeBinding) getBindings().getControlBinding("IdSemestre");//InsPedValide
                            AttributeBinding insp_validee = (AttributeBinding) getBindings().getControlBinding("InsPedValide");
                            
                            AttributeBinding id_sem_sem = (AttributeBinding) getBindings().getControlBinding("IdSemestreSem");
                            //pas de resulat ancien
                            if(row_insc_sem_anc == null){
                                AttributeBinding CumulCredit = (AttributeBinding) getBindings().getControlBinding("CumulCredit");
                                AttributeBinding DetteCredit = (AttributeBinding) getBindings().getControlBinding("DetteCredit");
                                // semestre pas validé, creer une nouvelle ligne pour preparer l'insertion  
                                credit_obtenu = credit;
                                credit_dette = (30 - credit);
                                
                                OperationBinding operationBindingPed = getBindings().getOperationBinding("CreateInsertPedSem");
                                Object result_ped = operationBindingPed.execute();
                                            
                                if (!operationBindingPed.getErrors().isEmpty()) {
                                    return null;
                                }
                                else{System.out.println("id_niv_form res 1");
                                    idInsPedSem.setInputValue(Long.parseLong(id_insc_ped.getInputValue().toString()));
                                    insp_validee.setInputValue(1);
                                    id_sem.setInputValue(3);
                                    CumulCredit.setInputValue(credit_obtenu);
                                    DetteCredit.setInputValue(credit_dette);
                                    Util.setInputValue(Long.parseLong(getUtilisateur()));
                                    
                                    nextStop = taskFlowTrainModel.getNextStop(currentStop);
                                    if(nextStop != null){
                                        if(isSkipTrainStop(nextStop) == false){
                                            //no need to loop any further
                                            nextStopAction = nextStop.getOutcome();
                                            //break;
                                        }
                                    }
                                    nextStop = taskFlowTrainModel.getNextStop(nextStop);
                                }
                            }
                            // il ya un resulat
                            else{
                                // semestre deja valider
                                if((row_insc_sem_anc.getAttribute("Resultat") != null && Integer.parseInt(row_insc_sem_anc.getAttribute("Resultat").toString()) == 2) || (row_insc_sem_anc.getAttribute("Note") != null && Float.parseFloat(row_insc_sem_anc.getAttribute("Note").toString()) >= 10)){
                                    FacesMessage msg = new FacesMessage(" L'étudiant a déjà validé le semestre ! ");
                                    msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                                    FacesContext.getCurrentInstance().addMessage(null, msg);
                                }
                                else{
                                    
                                    AttributeBinding CumulCredit = (AttributeBinding) getBindings().getControlBinding("CumulCredit");
                                    AttributeBinding DetteCredit = (AttributeBinding) getBindings().getControlBinding("DetteCredit");
                                    
                                    if(row_insc_sem_anc.getAttribute("Credit") != null)
                                        credit = Integer.parseInt(row_insc_sem_anc.getAttribute("Credit").toString());
                                    
                                    // semestre pas validé, creer une nouvelle ligne pour preparer l'insertion  
                                    System.out.println("id_niv_form  id_niv_form "+id_niv_form.getInputValue());
                                    
                                    System.out.println("Credit Obtenu "+row_insc_sem_anc.getAttribute("Credit"));
                                    credit_obtenu = credit;
                                    credit_dette = (30 - credit);
                                    System.out.println("Result"+row_insc_sem_anc.getAttribute("Resultat"));
                                    System.out.println("Dette "+ (30 - credit));
                                    
                                    OperationBinding operationBindingPed = getBindings().getOperationBinding("CreateInsertPedSem");
                                    Object result_ped = operationBindingPed.execute();
                                                
                                    if (!operationBindingPed.getErrors().isEmpty()) {
                                        return null;
                                    }
                                    else{
                                        sessionScope.put("cumul_dette", 1);
                                        insp_validee.setInputValue("1");
                                        id_sem.setInputValue(row_op_sem.getAttribute("IdSemestre"));
                                        CumulCredit.setInputValue(credit_obtenu);
                                        DetteCredit.setInputValue(credit_dette);
                                        Util.setInputValue(Long.parseLong(getUtilisateur()));
                                        
                                        nextStop = taskFlowTrainModel.getNextStop(currentStop);
                                        if(nextStop != null){
                                            if(isSkipTrainStop(nextStop) == false){
                                                //no need to loop any further
                                                nextStopAction = nextStop.getOutcome();
                                                //break;
                                            }
                                        }
                                        nextStop = taskFlowTrainModel.getNextStop(nextStop);
                                    } 
                                }                
                            }

                        }
                        else{ 
                            DCIteratorBinding iter_insc_semestre = (DCIteratorBinding)getBindings().get("InscriptionPedSemestreIterator");
                            Row row_insc_semestre = iter_insc_semestre.getCurrentRow();
                            sessionScope.put("cumul_dette", 1);
                            OperationBinding findUpdate = getBindings().getOperationBinding("findAndUpdateInsPedVal");
                            findUpdate.getParamsMap().put("id_insc_ped_sem", Long.parseLong(row_insc_semestre.getAttribute("IdInscriptionPedSemestre").toString()));
                            findUpdate.getParamsMap().put("insc_ped_val", 1);
                            findUpdate.execute();
                            nextStop = taskFlowTrainModel.getNextStop(currentStop);
                            if(nextStop != null){
                                if(isSkipTrainStop(nextStop) == false){
                                    //no need to loop any further
                                    nextStopAction = nextStop.getOutcome();
                                    //break;
                                }
                                nextStop = taskFlowTrainModel.getNextStop(nextStop);
                            }
                        }
                        /*********************************/

                    }
                }
                else{
                    FacesMessage msg = new FacesMessage(" Inscription Pédagogique non validée :");
                    msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, msg);
                    
                    if(row_insc_ped.getAttribute("EtatInscrEtatInscrId") == null){
                        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(" --> L'état d'incription n'est pas encore finalisé (définitif)"));
                    }
                    if(row_insc_ped.getAttribute("InsEnLigne") == null){
                        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(" --> L'étudiant n'a pas effectué l'inscription en ligne"));
                    }
                }
            }
            else{
                FacesMessage msg = new FacesMessage(" Aucune Inscription Pédagogique disponible !");
                msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, msg);
            }
        }

        return nextStopAction;
    }
    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
    }
    @SuppressWarnings("unchecked")
        public List semestreNiv(Integer niv){
            List tab = new ArrayList();
            if(niv == 1){
                tab.add("2");
                tab.add("1");
            }
            else if(niv == 2){
                    tab.add("4");
                    tab.add("3");
            }
            else if(niv == 3){
                    tab.add("6");
                    tab.add("5");
            }
            else if(niv == 4){
                    tab.add("2");
                    tab.add("1");
            }
            else if(niv == 5){
                    tab.add("4");
                    tab.add("3");
            }
            return tab;
        }

    @SuppressWarnings("unchecked")
    public String onNextInsPedSem() {
        // Add event code here...
        
        String nextStopAction = null;
        ControllerContext controllerContext = ControllerContext.getInstance();
        ViewPortContext currentViewPortCtx = controllerContext.getCurrentViewPort();
        TaskFlowContext taskFlowCtx = currentViewPortCtx.getTaskFlowContext();
        TaskFlowTrainModel taskFlowTrainModel = taskFlowCtx.getTaskFlowTrainModel();
        TaskFlowTrainStopModel currentStop = taskFlowTrainModel.getCurrentStop();

        TaskFlowTrainStopModel nextStop = null;
        ADFContext adfCtx = ADFContext.getCurrent();
        Map sessionScope = adfCtx.getSessionScope();

        AttributeBinding idSem = (AttributeBinding) getBindings().getControlBinding("IdSemestre");
        AttributeBinding idInsPedSem = (AttributeBinding) getBindings().getControlBinding("Semestres");
        idSem.setInputValue(Long.parseLong(getSemestre()));
        AttributeBinding IdParcoursMaquetAnnee = (AttributeBinding) getBindings().getControlBinding("IdParcoursMaquetAnnee");
        
        // liste des ue deja validées
        AttributeBinding id_niv_form = (AttributeBinding) getBindings().getControlBinding("IdNiveauFormation");
        
        OperationBinding op_insc_sem_anc = getBindings().getOperationBinding("getListeUeValider");            
        op_insc_sem_anc.getParamsMap().put("idpers",  Long.parseLong(sessionScope.get("idpers").toString()));
        op_insc_sem_anc.getParamsMap().put("id_sem",  Long.parseLong(getSemestre()));
        op_insc_sem_anc.getParamsMap().put("id_niv_form",  Long.parseLong(id_niv_form.getInputValue().toString()));
        op_insc_sem_anc.execute();
        
        
        
        OperationBinding opinspedSem = getBindings().getOperationBinding("ExecuteWithParams1");
        System.out.println("IdParcoursMaquetAnnee"+IdParcoursMaquetAnnee.getInputValue().toString());
        opinspedSem.getParamsMap().put("id_parcours_maq",  Long.parseLong(IdParcoursMaquetAnnee.getInputValue().toString()));
        opinspedSem.getParamsMap().put("id_sem",  Long.parseLong(getSemestre()));
        opinspedSem.getParamsMap().put("id_pers",  Long.parseLong(sessionScope.get("idpers").toString()));        
        opinspedSem.execute();
        
        //getEtudiants
        /*OperationBinding getEtudiants = getBindings().getOperationBinding("getEtudiants");
        getEtudiants.getParamsMap().put("idpers",  Long.parseLong(sessionScope.get("idpers").toString()));        
        getEtudiants.execute();*/
        
        
        DCIteratorBinding iter = (DCIteratorBinding) BindingContext.getCurrent().getCurrentBindingsEntry().get("InscriptionPedSemestreIterator");        
        Row row_insc_ped_sem = iter.getCurrentRow();
        
        if(row_insc_ped_sem.getAttribute("InsPedValide")!=null && Integer.parseInt(row_insc_ped_sem.getAttribute("InsPedValide").toString()) == 1){        
            OperationBinding op_pers_commit = getBindings().getOperationBinding("Commit");
            Object result_pers_commit = op_pers_commit.execute();
            if (!op_pers_commit.getErrors().isEmpty()) {
                return null;
            }
            
            else{
                AttributeBinding mobilite = (AttributeBinding) getBindings().getControlBinding("Mobilite");
                
                if(mobilite.getInputValue() != null && Integer.parseInt(mobilite.getInputValue().toString())==1){
                    sessionScope.put("var_etud_mob", 1);
                }
                else{
                    sessionScope.put("var_etud_mob", 0);
                }
                
                nextStop = taskFlowTrainModel.getNextStop(currentStop);
                if(nextStop != null){
                    if(isSkipTrainStop(nextStop) == false){
                        //no need to loop any further
                        nextStopAction = nextStop.getOutcome();
                        //break;
                    }
                    nextStop = taskFlowTrainModel.getNextStop(nextStop);
                }
    
            }
        }
        else{
            FacesMessage msg = new FacesMessage(" L'Inscription pédagogique n'est pas validée ");
            msg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }
        return nextStopAction;
    }

    @SuppressWarnings("unchecked")
    public String onNextInsPedSemUe() {

        String nextStopAction = null;
        ControllerContext controllerContext = ControllerContext.getInstance();
        ViewPortContext currentViewPortCtx = controllerContext.getCurrentViewPort();
        TaskFlowContext taskFlowCtx = currentViewPortCtx.getTaskFlowContext();
        TaskFlowTrainModel taskFlowTrainModel = taskFlowCtx.getTaskFlowTrainModel();
        TaskFlowTrainStopModel currentStop = taskFlowTrainModel.getCurrentStop();
        TaskFlowTrainStopModel nextStop = null;

        AttributeBinding insc_ped_liste = (AttributeBinding) getBindings().getControlBinding("IdInscriptionPedagogiqueListInsc");
        AttributeBinding id_parc_liste = (AttributeBinding) getBindings().getControlBinding("IdParcoursMaquetAnneeListInsc");
        AttributeBinding id_etud_liste = (AttributeBinding) getBindings().getControlBinding("IdEtudiantListInsc");
        
        DCIteratorBinding iter = (DCIteratorBinding) BindingContext.getCurrent().getCurrentBindingsEntry().get("InscriptPedSemUeROIterator");
        RowSetIterator rsi = iter.getViewObject().createRowSetIterator(null);
        if(rsi.getRowCount() == 0){
            FacesMessage msg = new FacesMessage(" L'étudiant a déjà validé toutes les Ue ");
            msg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }
        else{
            if(nombreCaseCoche("InscriptPedSemUeROIterator") < rsi.getRowCount()){
                FacesMessage msg = new FacesMessage(" Veuillez selectionner toutes les Ue pour continuer ! ");
                msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, msg);
            }
            else{
                while (rsi.hasNext()) {
                    Row nextRow = rsi.next();
                    if(nextRow.getAttribute("case_cocher")!=null){
                        if(Boolean.parseBoolean(nextRow.getAttribute("case_cocher").toString())){
                            list.add(nextRow.getAttribute("Codification").toString());
                        }
                    }
                }
                
                nextStop = taskFlowTrainModel.getNextStop(currentStop);
                if(nextStop != null){
                    if(isSkipTrainStop(nextStop) == false){
                        //no need to loop any further
                        nextStopAction = nextStop.getOutcome();
                        //break;
                    }
                    nextStop = taskFlowTrainModel.getNextStop(nextStop);
                }
                //
            }
        }

        return nextStopAction;
    }

    @SuppressWarnings("unchecked")
    public String validerInsUe() {
        // Add event code here...
        ADFContext adfCtx = ADFContext.getCurrent();
        Map sessionScope = adfCtx.getSessionScope();

        AttributeBinding EtatInscrEtatInscrId = (AttributeBinding) getBindings().getControlBinding("EtatInscrEtatInscrId");
        AttributeBinding IdInscriptionPedSemestre = (AttributeBinding) getBindings().getControlBinding("IdInscriptionPedSemestre");
        AttributeBinding idInsPedSem = (AttributeBinding) getBindings().getControlBinding("IdInscriptionPedSemestre1");
        AttributeBinding id_fil_ue = (AttributeBinding) getBindings().getControlBinding("IdFiliereUeSemstre1");
        AttributeBinding utilisateur = (AttributeBinding) getBindings().getControlBinding("UtiCree");
        
        if(Integer.parseInt(sessionScope.get("ins_ped_val").toString()) == 0 || Integer.parseInt(sessionScope.get("val_etat_insc").toString()) == 0 || 
            Integer.parseInt(sessionScope.get("val_paiement").toString()) == 0 || Integer.parseInt(sessionScope.get("val_apte").toString()) == 0 || 
           Integer.parseInt(sessionScope.get("val_etud_bu").toString()) == 0 || Integer.parseInt(sessionScope.get("val_resp_etud").toString()) == 0 || Integer.parseInt(sessionScope.get("val_etud_tic").toString()) == 0)
        {
             
             FacesMessage msg = new FacesMessage(" La liste des erreurs :");
             msg.setSeverity(FacesMessage.SEVERITY_ERROR);
             FacesContext.getCurrentInstance().addMessage(null, msg);
             
             if(Integer.parseInt(sessionScope.get("ins_ped_val").toString()) == 0){
                 FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(" --> L'inscription Pédagogique n'est pas validée"));
             }
             if(Integer.parseInt(sessionScope.get("val_etat_insc").toString()) == 0){
                 FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(" --> L'état d'inscription n'est pas définitif"));
             }
             if(Integer.parseInt(sessionScope.get("val_paiement").toString()) == 0){
                 FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(" --> Le Paiement n'est pas validé"));
             }

             if(Integer.parseInt(sessionScope.get("val_apte").toString()) == 0 ){
                 FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(" --> L'étudiant n'est pas apte"));
             }
             if(Integer.parseInt(sessionScope.get("val_etud_bu").toString()) == 0){
                 FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(" --> L'étudiant n'est pas en règle avec la BU"));
             }
             if(Integer.parseInt(sessionScope.get("val_etud_tic").toString()) == 0){
                 FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(" --> TIC n'est pas renseignée"));
             }
             if(Integer.parseInt(sessionScope.get("val_resp_etud").toString()) == 0){
                 FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(" --> Le responsable de l'étudiant"));
             }

         }
        else{           
            
            AttributeBinding id_parc_maq = (AttributeBinding) getBindings().getControlBinding("IdParcoursMaquetAnnee");
            
            OperationBinding op_ue_insc = getBindings().getOperationBinding("getUeInscEnCours");
            System.out.println("IdParcoursMaquetAnnee"+id_parc_maq.getInputValue().toString());
            op_ue_insc.getParamsMap().put("id_parcours_maq",  Long.parseLong(id_parc_maq.getInputValue().toString()));
            op_ue_insc.getParamsMap().put("id_sem",  Long.parseLong(getSemestre()));
            op_ue_insc.getParamsMap().put("id_annee",  Long.parseLong(getAnne_univers()));
            op_ue_insc.getParamsMap().put("id_pers",  Long.parseLong(sessionScope.get("idpers").toString()));        
            op_ue_insc.execute();
            
            DCIteratorBinding iter_ue_insc = (DCIteratorBinding) BindingContext.getCurrent().getCurrentBindingsEntry().get("lesUeInscPedSemUeROIterator");        
            RowSetIterator rsi_ue_insc = iter_ue_insc.getViewObject().createRowSetIterator(null);
            
            if(rsi_ue_insc.getRowCount()==0){
                FacesMessage msg = new FacesMessage(" L'étudiant est déjà inscrit pour les Ue du semestre "+getSemestre());
                msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, msg);
            }
            else{
                Integer i=0;
                //if(Integer.parseInt(EtatInscrEtatInscrId.getInputValue().toString())!=22){
                // insertion des Ue non validées
                DCIteratorBinding iter = (DCIteratorBinding) BindingContext.getCurrent().getCurrentBindingsEntry().get("InscriptPedSemUeROIterator");
                RowSetIterator rsi = iter.getViewObject().createRowSetIterator(null);
                
                while (rsi.hasNext()) {
                    Row nextRow = rsi.next();
                    OperationBinding operationBindingPed = getBindings().getOperationBinding("CreateInsert");
                    Object result_ped = operationBindingPed.execute();
                               
                    if (!operationBindingPed.getErrors().isEmpty()) {
                       return null;
                    }
                    else{
                       idInsPedSem.setInputValue(Long.parseLong(IdInscriptionPedSemestre.getInputValue().toString()));
                       id_fil_ue.setInputValue(Long.parseLong(nextRow.getAttribute("IdFiliereUeSemstre").toString()));
                       utilisateur.setInputValue(Long.parseLong(sessionScope.get("id_user").toString()));       // utilisateur connecté
    
                       OperationBinding operationBinding1 = getBindings().getOperationBinding("Commit");
                       Object result = operationBinding1.execute();
                       if (!operationBinding1.getErrors().isEmpty()) {
                               //handle errors if any
                               return null;
                       }
                       else{
                           i++;     //nombre d'Ue coché
                       }
                    }
                }
                // fin insertion des Ue non validées
                
                // insertion des Ue deja validées
                
                AttributeBinding id_niv_form = (AttributeBinding) getBindings().getControlBinding("IdNiveauFormation");
                
                AttributeBinding id_insc_ped_sem = (AttributeBinding) getBindings().getControlBinding("IdInscriptionPedSemestreSem");
                
                OperationBinding op_insc_sem_anc = getBindings().getOperationBinding("getListeUeValider");            
                op_insc_sem_anc.getParamsMap().put("idpers",  Long.parseLong(sessionScope.get("idpers").toString()));
                op_insc_sem_anc.getParamsMap().put("id_sem",  Long.parseLong(getSemestre()));
                op_insc_sem_anc.getParamsMap().put("id_niv_form",  Long.parseLong(id_niv_form.getInputValue().toString()));
                op_insc_sem_anc.execute();
                
                //IdInscriptionPedSemestre1
                AttributeBinding id_insc_ped_sem_ue = (AttributeBinding) getBindings().getControlBinding("IdInscriptionPedSemestrePedSem");
                AttributeBinding id_fil_ue_sem = (AttributeBinding) getBindings().getControlBinding("IdFiliereUeSemstrePedSem");
                AttributeBinding id_util = (AttributeBinding) getBindings().getControlBinding("UtiCreePedSemUe");
                //CreateInsertPedSemUe
                DCIteratorBinding iter_insc = (DCIteratorBinding) BindingContext.getCurrent().getCurrentBindingsEntry().get("listeUeValideIterator");
                RowSetIterator rsi_insc = iter_insc.getViewObject().createRowSetIterator(null);
                if(rsi.getFetchedRowCount() > 0){
                    while (rsi_insc.hasNext()) {
                        Row nextRow = rsi_insc.next();
                        if(Integer.parseInt(nextRow.getAttribute("Resultat").toString()) == 2 || Integer.parseInt(nextRow.getAttribute("Resultat").toString()) == 3 || Long.parseLong(nextRow.getAttribute("Note").toString()) > 10){
                            
                            OperationBinding operationBindingPed = getBindings().getOperationBinding("CreateInsertPedSemUe");
                            Object result_ped = operationBindingPed.execute();
                                       
                            if (!operationBindingPed.getErrors().isEmpty()) {
                               return null;
                            }
                            else{
                                id_insc_ped_sem_ue.setInputValue(Long.parseLong(id_insc_ped_sem.getInputValue().toString()));
                                id_fil_ue_sem.setInputValue(Long.parseLong(nextRow.getAttribute("IdFiliereUeSemstre").toString()));
                                id_util.setInputValue(Long.parseLong(getUtilisateur()));
                                
                                OperationBinding operationBinding1 = getBindings().getOperationBinding("Commit");
                                Object result = operationBinding1.execute();
                                if (!operationBinding1.getErrors().isEmpty()) {
                                        //handle errors if any
                                        return null;
                                }
                                else{
    
                                    AttributeBinding id_insc_ped_res = (AttributeBinding) getBindings().getControlBinding("IdInscriptionPedSemUeRes");
                                    AttributeBinding note = (AttributeBinding) getBindings().getControlBinding("Note");
                                    AttributeBinding credit = (AttributeBinding) getBindings().getControlBinding("Credit");
                                    AttributeBinding resultat = (AttributeBinding) getBindings().getControlBinding("Resultat");
                                    AttributeBinding id_util_res = (AttributeBinding) getBindings().getControlBinding("UtiCreeRes");
                                    AttributeBinding id_cal = (AttributeBinding) getBindings().getControlBinding("IdCalendrierDeliberation");
                                    
                                    AttributeBinding id_ped_sem_ue = (AttributeBinding) getBindings().getControlBinding("IdInscriptionPedSemUe");
                                    
                                    OperationBinding opPed = getBindings().getOperationBinding("CreateInsertResultPedSemUe");
                                    Object resul_ins_ped = opPed.execute();
                                               
                                    if (!opPed.getErrors().isEmpty()) {
                                       return null;
                                    }
                                    else{
                                        //IdInscriptionPedSemUeRes
                                        id_insc_ped_res.setInputValue(Long.parseLong(id_ped_sem_ue.getInputValue().toString()));
                                        note.setInputValue(Float.parseFloat(nextRow.getAttribute("Note").toString()));
                                        credit.setInputValue(Long.parseLong(nextRow.getAttribute("Credit").toString()));
                                        resultat.setInputValue(Long.parseLong(nextRow.getAttribute("Resultat").toString()));
                                        id_cal.setInputValue(Long.parseLong(nextRow.getAttribute("IdCalendrierDeliberation").toString()));
                                        id_util_res.setInputValue(Long.parseLong(getUtilisateur()));
                                        //
                                        OperationBinding op_commit = getBindings().getOperationBinding("Commit");
                                        Object result_commit = op_commit.execute();
                                        if (!op_commit.getErrors().isEmpty()) {
                                                //handle errors if any
                                                return null;
                                        }
                                        else{
                                            i++;
                                        }
                                    }
                                }
                                
                            }
                        }
                    }
                }
                FacesMessage msg = new FacesMessage(" Inscription de "+i+" Ue(s) validée(s) ");
                msg.setSeverity(FacesMessage.SEVERITY_INFO);
                FacesContext.getCurrentInstance().addMessage(null, msg);
                sessionScope.put("TfInsID", "/inscription/processus_inscription/task-flow-default.xml#task-flow-default");
            //}
                DCIteratorBinding iter_insc_ped = (DCIteratorBinding) getBindings().get("listeInsPedIterator");
                
                Row currentRow_insc_ped = iter_insc_ped.getCurrentRow();
                
                if(currentRow_insc_ped != null){
                    sessionScope.put("id_insc_certificat_insc" ,Long.parseLong(currentRow_insc_ped.getAttribute("IdInscriptionPedagogique").toString()));
                    sessionScope.put("is_down_certificat_insc", 0);
                }
                else{
                    sessionScope.put("is_down_certificat_insc", 1);                
                }
            }
        }
        return null;
    }
    public Connection getDataSourceConnection(String dataSourceName) throws Exception {
        Context ctx = new InitialContext();
        DataSource ds = (DataSource) ctx.lookup(dataSourceName);
        return ds.getConnection();
    }

    private Connection getConnection() throws Exception {
        return getDataSourceConnection("jdbc/refDS"); // datasource name should be defined in weblogic
    }

    public ServletContext getContext() {
        return (ServletContext) getFacesContext().getExternalContext().getContext();
    }

    public HttpServletResponse getResponse() {
        return (HttpServletResponse) getFacesContext().getExternalContext().getResponse();
    }

    public static FacesContext getFacesContext() {
        return FacesContext.getCurrentInstance();
    }

    public void runReport(String repPath, java.util.Map param, String document) throws Exception {
        System.out.println("Running ...");
            String path0 = System.getProperty("user.home");
            System.out.println("User Directory : "+path0);
            BindingContainer bindings = getBindings();

            
            Connection conn = null;

                try {
                HttpServletResponse response = getResponse();
                ServletOutputStream out = response.getOutputStream();
                response.setHeader("Cache-Control", "max-age=0");
                response.setContentType("application/pdf");
                ServletContext context = getContext();
                InputStream fs = this.getClass().getClassLoader().getResourceAsStream("/reports/test_jasper1.jasper");
                JasperReport template = (JasperReport) JRLoader.loadObject(fs);
                template.setWhenNoDataType(WhenNoDataTypeEnum.ALL_SECTIONS_NO_DETAIL);
                conn = getConnection();
                @SuppressWarnings("unchecked")
                JasperPrint print = JasperFillManager.fillReport(template, param, conn);
                //Affichage du report
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                JasperExportManager.exportReportToPdfStream(print, baos);
                out.write(baos.toByteArray());
                //téléchargement du report direct
                //JasperExportManager.exportReportToPdfFile(print,file);
                //JasperExportManager.exportReportToPdfFile(printFileName, "C://sample_report.pdf");
                
                //RichPopup popup = this.getPopupSuccessReport();
                //RichPopup.PopupHints hints = new RichPopup.PopupHints();
                //popup.show(hints);
                
                out.flush();
                out.close();
        
                FacesContext.getCurrentInstance().responseComplete();
                
            } catch (Exception jex) {
                jex.printStackTrace();
            } finally {
                System.out.println("Finnish");
                close(conn);
            }
            //}
        }

        @SuppressWarnings("oracle.jdeveloper.java.insufficient-catch-block")
        public void close(Connection con) {
            if (con != null) {
                try {
                    con.close();
                } catch (Exception e) {
                }
            }
        }


    public void setCheck_all(RichSelectBooleanCheckbox check_all) {
        this.check_all = check_all;
    }

    public RichSelectBooleanCheckbox getCheck_all() {
        return check_all;
    }

    public void onSelectAllUe(ValueChangeEvent valueChangeEvent) {
        // cocher tous
        if(Boolean.parseBoolean(check_all.getValue().toString())){
            DCIteratorBinding iter = (DCIteratorBinding) getBindings().get("InscriptPedSemUeROIterator");        
            RowSetIterator rsi = iter.getViewObject().createRowSetIterator(null); 
            while (rsi.hasNext()) {
                Row nextRow = rsi.next();
                nextRow.setAttribute("case_cocher", Boolean.TRUE);
            }
        }
        //décocher tous
        else{
            DCIteratorBinding iter = (DCIteratorBinding) getBindings().get("InscriptPedSemUeROIterator");        
            RowSetIterator rsi = iter.getViewObject().createRowSetIterator(null); 
            while (rsi.hasNext()) {
                Row nextRow = rsi.next();
                nextRow.setAttribute("case_cocher", Boolean.FALSE);
            }
        }
    }

    public String onValiderResponsable() {
        // Add event code here...
        OperationBinding op_pers_commit = getBindings().getOperationBinding("Commit");
        Object result_pers_commit = op_pers_commit.execute();
        if (!op_pers_commit.getErrors().isEmpty()) {
            return null;
        }
        
        else{
            FacesMessage msg = new FacesMessage(" Responsable enregistré avec succès ");
            msg.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }
        return null;
    }

    /*public TaskFlowId getDynamicTaskFlowId() {
        return TaskFlowId.parse(taskFlowId);
    }

    public void setDynamicTaskFlowId(String taskFlowId) {
        this.taskFlowId = taskFlowId;
    }*/

    public TaskFlowId getDynamicTaskFlowId() {
        return TaskFlowId.parse(taskFlowId);
    }

    public void setDynamicTaskFlowId(String taskFlowId) {
        this.taskFlowId = taskFlowId;
    }

    public TaskFlowId getDynamicTaskFlowId1() {
        return TaskFlowId.parse(taskFlowId1);
    }

    public void setDynamicTaskFlowId1(String taskFlowId) {
        this.taskFlowId1 = taskFlowId;
    }

    public void setPopup(RichPopup popup) {
        this.popup = popup;
    }

    public RichPopup getPopup() {
        return popup;
    }

    public void onDialog(DialogEvent dialogEvent) {
        // Add event code here...
        String nextStopAction = null;
        ControllerContext controllerContext = ControllerContext.getInstance();
        ViewPortContext currentViewPortCtx = controllerContext.getCurrentViewPort();
        TaskFlowContext taskFlowCtx = currentViewPortCtx.getTaskFlowContext();
        TaskFlowTrainModel taskFlowTrainModel = taskFlowCtx.getTaskFlowTrainModel();
        TaskFlowTrainStopModel currentStop = taskFlowTrainModel.getCurrentStop();

        TaskFlowTrainStopModel nextStop = null;
        
        OperationBinding op_pers_commit = getBindings().getOperationBinding("Commit");
        Object result_pers_commit = op_pers_commit.execute();
        if (!op_pers_commit.getErrors().isEmpty()) {
            return ;
        }
        
        else{
            nextStop = taskFlowTrainModel.getNextStop(currentStop);
            if(nextStop != null){
                if(isSkipTrainStop(nextStop) == false){
                    //no need to loop any further
                    nextStopAction = nextStop.getOutcome();
                    //break;
                }
            }
            nextStop = taskFlowTrainModel.getNextStop(nextStop);
            
            FacesMessage msg = new FacesMessage(" Inscription Pédagogique Semestre validée avec succès ");
            msg.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext.getCurrentInstance().addMessage(null, msg); this.getPopup().hide();nextPage();
        }
        //return nextStopAction;
    }

    public void onDialogCancel(ClientEvent clientEvent) {
        // Add event code here...
        this.getPopup().hide();
    }
    public String nextPage(){
        String nextStopAction = null;
        ControllerContext controllerContext = ControllerContext.getInstance();
        ViewPortContext currentViewPortCtx = controllerContext.getCurrentViewPort();
        TaskFlowContext taskFlowCtx = currentViewPortCtx.getTaskFlowContext();
        TaskFlowTrainModel taskFlowTrainModel = taskFlowCtx.getTaskFlowTrainModel();
        TaskFlowTrainStopModel currentStop = taskFlowTrainModel.getCurrentStop();

        TaskFlowTrainStopModel nextStop = null; 
        nextStop = taskFlowTrainModel.getNextStop(currentStop);
        if(nextStop != null){
            if(isSkipTrainStop(nextStop) == false){
                //no need to loop any further
                nextStopAction = nextStop.getOutcome();
                //break;
            }
        }
        nextStop = taskFlowTrainModel.getNextStop(nextStop);
        
        return nextStopAction;
    }

    public TaskFlowId getDynamicTaskFlowId2() {
        return TaskFlowId.parse(taskFlowId2);
    }

    public void setDynamicTaskFlowId2(String taskFlowId) {
        this.taskFlowId2 = taskFlowId;
    }

    @SuppressWarnings("unchecked")
    public void validationInscSem(String id_etud, String parcours){   
                        //Etat Inscription
        AttributeBinding niveau = (AttributeBinding) getBindings().getControlBinding("Niveau");
        List les_semestre = semestreNiv(Integer.parseInt(niveau.getInputValue().toString()));
        List nombre_sem = new ArrayList();
        for(int id_semestre = 0; id_semestre < les_semestre.size(); id_semestre++){
            OperationBinding get_sem_double = getBindings().getOperationBinding("getResultRedouble");
            get_sem_double.getParamsMap().put("id_parc_maq", parcours);
            get_sem_double.getParamsMap().put("id_etud", id_etud);
            get_sem_double.getParamsMap().put("id_sem", les_semestre.get(id_semestre));
            get_sem_double.execute();
            
            DCIteratorBinding iter = (DCIteratorBinding) BindingContext.getCurrent().getCurrentBindingsEntry().get("SemRedoubleROIterator");        
            Row row_sem = iter.getCurrentRow();
            if(row_sem == null){
                System.out.println("semestre "+les_semestre.get(id_semestre));                                          
                nombre_sem.add(les_semestre.get(id_semestre));
            }
        }
        if(nombre_sem.size()==0){
            sessionScope.put("val_insc_ped_sem", 0);
        }
        else
            sessionScope.put("val_insc_ped_sem", 1);
        System.out.println("val_insc_ped_sem "+sessionScope.get("val_insc_ped_sem")); 
    }

    @SuppressWarnings("unchecked")
    public void validationInscription(String id_etud, String id_insc_ped, String parcours){   
                        //Etat Inscription
        
        OperationBinding op_insc_ped = BindingContext.getCurrent().getCurrentBindingsEntry().getOperationBinding("getDetailInscPed");
        op_insc_ped.getParamsMap().put("id_insc_ped", Long.parseLong(id_insc_ped));
        op_insc_ped.execute();
        DCIteratorBinding iter_etat = (DCIteratorBinding) getBindings().get("InscPedagogiqueROIterator");

        Row currentRow_etat = iter_etat.getCurrentRow();
        
        
        /*AttributeBinding id_etat_insc = (AttributeBinding) getBindings().getControlBinding("EtatInscrEtatInscrId");
        System.out.println("id_etat_insc id_etat_insc "+id_etat_insc.getInputValue());*/
        if(currentRow_etat == null){
            sessionScope.put("val_etat_insc", 0);
            sessionScope.put("icone_etat_insc", "/images/delete_icon.png");
            // inscription en ligne
            sessionScope.put("val_insc_en_ligne", 0);
            sessionScope.put("icone_insc_en_ligne", "/images/delete_icon.png");
        }
        else{
            if(currentRow_etat.getAttribute("EtatInscrEtatInscrId") == null){
                sessionScope.put("val_etat_insc", 0);
                sessionScope.put("icone_etat_insc", "/images/delete_icon.png");
            }
            else{
                if(Integer.parseInt(currentRow_etat.getAttribute("EtatInscrEtatInscrId").toString()) == 22){        // pour etat definitif
                    sessionScope.put("val_etat_insc", 1);
                    sessionScope.put("icone_etat_insc", "/images/commit.png");
                }
                else{
                    sessionScope.put("val_etat_insc", 0);
                    sessionScope.put("icone_etat_insc", "/images/delete_icon.png");
                }
            }
            //en ligne
            if(currentRow_etat.getAttribute("InsEnLigne") == null){
                sessionScope.put("val_insc_en_ligne", 0);
                sessionScope.put("icone_insc_en_ligne", "/images/delete_icon.png");
            }
            else{
                if(Integer.parseInt(currentRow_etat.getAttribute("InsEnLigne").toString()) == 1){        // pour etat definitif
                    sessionScope.put("val_insc_en_ligne", 1);
                    sessionScope.put("icone_insc_en_ligne", "/images/commit.png");

                }
                else{
                    sessionScope.put("val_insc_en_ligne", 0);
                    sessionScope.put("icone_insc_en_ligne", "/images/delete_icon.png");
                }
            }
        }
        System.out.println("val_insc_en_ligne"+sessionScope.get("val_insc_en_ligne"));
        System.out.println("val_etat_insc"+sessionScope.get("val_etat_insc"));



        // Paiement Etudiant
        
        OperationBinding op_paie_etud = BindingContext.getCurrent().getCurrentBindingsEntry().getOperationBinding("getPaiementEtud");
        op_paie_etud.getParamsMap().put("id_insc_ped", Long.parseLong(id_insc_ped));
        op_paie_etud.getParamsMap().put("parcours", Long.parseLong(parcours));
        op_paie_etud.getParamsMap().put("id_etud", Long.parseLong(id_etud));
        op_paie_etud.getParamsMap().put("id_annee", Long.parseLong(getAnne_univers()));
        op_paie_etud.execute();
        DCIteratorBinding iter_paiement = (DCIteratorBinding) getBindings().get("PaiementEtudPreinsIterator");

        Row currentRow_paiement = iter_paiement.getCurrentRow();
        if (currentRow_paiement == null) {
            sessionScope.put("val_paiement", 0);
            sessionScope.put("icone_paiement", "/images/delete_icon.png");
        }
        else{
            if(Integer.parseInt(currentRow_paiement.getAttribute("Valider").toString()) == 1){
                sessionScope.put("val_paiement", 1);
                sessionScope.put("icone_paiement", "/images/commit.png");
            }
            else{
                sessionScope.put("val_paiement", 0);
                sessionScope.put("icone_paiement", "/images/delete_icon.png");
            }
        }
        
        // Apte
        
        OperationBinding op_apte_etud = BindingContext.getCurrent().getCurrentBindingsEntry().getOperationBinding("getAptitudeEtudiant");
        op_apte_etud.getParamsMap().put("id_etud", Long.parseLong(id_etud));
        op_apte_etud.getParamsMap().put("id_annee", Long.parseLong(getAnne_univers()));
        op_apte_etud.execute();
        DCIteratorBinding iter_apte_etud = (DCIteratorBinding) getBindings().get("AptePreinsIterator");
        Row currentRow_apte_etud = iter_apte_etud.getCurrentRow();
        if (currentRow_apte_etud == null) {
            sessionScope.put("val_apte", 0);
            sessionScope.put("icone_apte", "/images/delete_icon.png");  
        }
        else{
            if(Integer.parseInt(currentRow_apte_etud.getAttribute("Apte").toString()) == 1){
                sessionScope.put("val_apte", 1);
                sessionScope.put("icone_apte", "/images/commit.png");
            }
            else{
                sessionScope.put("val_apte", 0);
                sessionScope.put("icone_apte", "/images/delete_icon.png");  
            }
        }

        // Etudiant Bu

        DCIteratorBinding iter_histo = (DCIteratorBinding)getBindings().get("HistoriquesStructuresIterator");
        Row row_histo = iter_histo.getCurrentRow();
        if(row_histo != null){
            OperationBinding op_etud_bu = BindingContext.getCurrent().getCurrentBindingsEntry().getOperationBinding("getEtudiantBu");
            op_etud_bu.getParamsMap().put("id_struct",  Long.parseLong(row_histo.getAttribute("IdStructures").toString()));
            op_etud_bu.getParamsMap().put("id_etud", Long.parseLong(id_etud));
            op_etud_bu.getParamsMap().put("id_annee", Long.parseLong(getAnne_univers()));
            op_etud_bu.execute();
            DCIteratorBinding iter_etud_bu = (DCIteratorBinding) getBindings().get("EtudiantBuIterator");
            Row currentRow_etud_bu = iter_etud_bu.getCurrentRow();
            if (currentRow_etud_bu == null) {
                sessionScope.put("val_etud_bu", 0);
                sessionScope.put("icone_etud_bu", "/images/delete_icon.png");
            }
            else{
                if(Integer.parseInt(currentRow_etud_bu.getAttribute("EnRegle").toString()) == 1){
                    sessionScope.put("val_etud_bu", 1);
                    sessionScope.put("icone_etud_bu", "/images/commit.png");
                }
                else{
                    sessionScope.put("val_etud_bu", 0);
                    sessionScope.put("icone_etud_bu", "/images/delete_icon.png");  
                }           
            }
        }
        else{
            sessionScope.put("val_etud_bu", 0);
            sessionScope.put("icone_etud_bu", "/images/delete_icon.png");
        }
        System.out.println("row_histo "+row_histo);
        // Responsable Etudiant
        
        OperationBinding op_resp_etud = BindingContext.getCurrent().getCurrentBindingsEntry().getOperationBinding("getResponsableEtud");
        op_resp_etud.getParamsMap().put("id_etud", Long.parseLong(id_etud));
        op_resp_etud.execute();
        DCIteratorBinding iter_resp_etud = (DCIteratorBinding) getBindings().get("ResponsableROIterator");
        Row currentRow_resp_etud = iter_resp_etud.getCurrentRow();
        if (currentRow_resp_etud == null) {
            sessionScope.put("val_resp_etud", 0);
            sessionScope.put("icone_resp_etud", "/images/delete_icon.png");
        }
        else{
            sessionScope.put("val_resp_etud", 1);
            sessionScope.put("icone_resp_etud", "/images/commit.png");         
        }
        System.out.println("currentRow_resp_etud "+currentRow_resp_etud);
        //Insc Ped Validée
        
        DCIteratorBinding iter_insc_ped = (DCIteratorBinding) getBindings().get("InscriptionsPedagogiquesIterator");
        Row currentRow_insc_ped = iter_insc_ped.getCurrentRow();
        if (currentRow_insc_ped == null ) {
            sessionScope.put("ins_ped_val", 0);
            sessionScope.put("icone_ins_ped_val", "/images/delete_icon.png");
        }
        else{
            /*|| currentRow_paiement == null  || 
                currentRow_insc_ped.getAttribute("DroitInsPed") == null || currentRow_insc_ped.getAttribute("CoutFormation") == null || currentRow_paiement.getAttribute("MontantPercu") == null */
            if (currentRow_insc_ped.getAttribute("InsEnLigne") == null || currentRow_insc_ped.getAttribute("EtatInscrEtatInscrId") == null ) {
                sessionScope.put("ins_ped_val", 0);
                sessionScope.put("icone_ins_ped_val", "/images/delete_icon.png");
            }
            else{
                if (Integer.parseInt(currentRow_insc_ped.getAttribute("InsEnLigne").toString()) == 1 && Long.parseLong(currentRow_insc_ped.getAttribute("EtatInscrEtatInscrId").toString()) == 22) {
                    sessionScope.put("ins_ped_val", 1);
                    sessionScope.put("icone_ins_ped_val", "/images/commit.png");
                }
                else{
                    sessionScope.put("ins_ped_val", 0);
                    sessionScope.put("icone_ins_ped_val", "/images/delete_icon.png");
                }
            }
        }
        System.out.println("currentRow_insc_ped "+currentRow_insc_ped);
        // Etudiant TIC
        
        OperationBinding etud_tic = getBindings().getOperationBinding("getEtudiantTic");
        etud_tic.getParamsMap().put("id_etud",  id_etud);
        etud_tic.getParamsMap().put("id_annee",  Long.parseLong(getAnne_univers()));
        etud_tic.execute();
        
        DCIteratorBinding iter_etud_tic = (DCIteratorBinding) getBindings().get("EtudiantTicROIterator");
        
        Row currentRow_etud_tic = iter_etud_tic.getCurrentRow();
        
        if(currentRow_etud_tic != null){
            sessionScope.put("val_etud_tic", 1);
            sessionScope.put("icone_etud_tic", "/images/commit.png");
        }
        else{
            sessionScope.put("val_etud_tic", 0);
            sessionScope.put("icone_etud_tic", "/images/delete_icon.png");  
        }
    }
    public String getEtatInsc(){
        AttributeBinding id_etat_insc = (AttributeBinding) getBindings().getControlBinding("EtatInscrEtatInscrId");
        String etat="Non";
        if(id_etat_insc.getInputValue() == null){
            //sessionScope.put("val_etat_insc", 0);
            sessionScope.put("icon_etat_insc", "/images/delete_icon.png");
        }
        else{
            if(Integer.parseInt(id_etat_insc.getInputValue().toString()) == 22){        // pour etat definitif
                //sessionScope.put("val_etat_insc", 1);
                etat = "Oui";
                sessionScope.put("icon_etat_insc", "/images/commit.png");
            }
            else{
                //sessionScope.put("val_etat_insc", 0);
                sessionScope.put("icon_etat_insc", "/images/delete_icon.png");
            }
        }
        System.out.println("etatetatetat"+etat);
        return etat;
    }

    public void onChangeEtat(ValueChangeEvent valueChangeEvent) {
        // Add event code here...
        BindingContext cntx = BindingContext.getCurrent();
        DCBindingContainer cbinding = (DCBindingContainer) cntx.getCurrentBindingsEntry();
        UIComponent comp = valueChangeEvent.getComponent();
        comp.processUpdates(FacesContext.getCurrentInstance());
        AttributeBinding id_etat_insc = (AttributeBinding) getBindings().getControlBinding("EtatInscrEtatInscrId");
        System.out.println("etatetatetat"+id_etat_insc.getInputValue());
        if(Long.parseLong(id_etat_insc.getInputValue().toString()) == 22){
            sessionScope.put("val_etat_insc", 1);

        }
        
    }
}
