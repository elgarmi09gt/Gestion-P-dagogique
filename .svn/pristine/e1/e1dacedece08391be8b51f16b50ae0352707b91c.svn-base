package model.updatableview;

import java.math.BigDecimal;

import java.sql.Timestamp;

import model.readOnlyView.InfoExonerationROVORowImpl;
import model.readOnlyView.ListeInsPedExonerationROVORowImpl;

import oracle.jbo.RowSet;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat May 08 11:28:09 GMT 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ExonerationVORowImpl extends ViewRowImpl {


    public static final int ENTITY_EXONERATIONEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        IdExoneration {
            protected Object get(ExonerationVORowImpl obj) {
                return obj.getIdExoneration();
            }

            protected void put(ExonerationVORowImpl obj, Object value) {
                obj.setIdExoneration((DBSequence) value);
            }
        }
        ,
        IdTypeExoneration {
            protected Object get(ExonerationVORowImpl obj) {
                return obj.getIdTypeExoneration();
            }

            protected void put(ExonerationVORowImpl obj, Object value) {
                obj.setIdTypeExoneration((DBSequence) value);
            }
        }
        ,
        IdNatureExoneration {
            protected Object get(ExonerationVORowImpl obj) {
                return obj.getIdNatureExoneration();
            }

            protected void put(ExonerationVORowImpl obj, Object value) {
                obj.setIdNatureExoneration((DBSequence) value);
            }
        }
        ,
        IdMotifExoneration {
            protected Object get(ExonerationVORowImpl obj) {
                return obj.getIdMotifExoneration();
            }

            protected void put(ExonerationVORowImpl obj, Object value) {
                obj.setIdMotifExoneration((DBSequence) value);
            }
        }
        ,
        IdAnneesUnivers {
            protected Object get(ExonerationVORowImpl obj) {
                return obj.getIdAnneesUnivers();
            }

            protected void put(ExonerationVORowImpl obj, Object value) {
                obj.setIdAnneesUnivers((Long) value);
            }
        }
        ,
        Taux {
            protected Object get(ExonerationVORowImpl obj) {
                return obj.getTaux();
            }

            protected void put(ExonerationVORowImpl obj, Object value) {
                obj.setTaux((BigDecimal) value);
            }
        }
        ,
        Montant {
            protected Object get(ExonerationVORowImpl obj) {
                return obj.getMontant();
            }

            protected void put(ExonerationVORowImpl obj, Object value) {
                obj.setMontant((Long) value);
            }
        }
        ,
        RefExo {
            protected Object get(ExonerationVORowImpl obj) {
                return obj.getRefExo();
            }

            protected void put(ExonerationVORowImpl obj, Object value) {
                obj.setRefExo((String) value);
            }
        }
        ,
        DateCreation {
            protected Object get(ExonerationVORowImpl obj) {
                return obj.getDateCreation();
            }

            protected void put(ExonerationVORowImpl obj, Object value) {
                obj.setDateCreation((Timestamp) value);
            }
        }
        ,
        DateModification {
            protected Object get(ExonerationVORowImpl obj) {
                return obj.getDateModification();
            }

            protected void put(ExonerationVORowImpl obj, Object value) {
                obj.setDateModification((Timestamp) value);
            }
        }
        ,
        UtiCree {
            protected Object get(ExonerationVORowImpl obj) {
                return obj.getUtiCree();
            }

            protected void put(ExonerationVORowImpl obj, Object value) {
                obj.setUtiCree((Long) value);
            }
        }
        ,
        UtiModifie {
            protected Object get(ExonerationVORowImpl obj) {
                return obj.getUtiModifie();
            }

            protected void put(ExonerationVORowImpl obj, Object value) {
                obj.setUtiModifie((Long) value);
            }
        }
        ,
        IdInscriptionPedagogique {
            protected Object get(ExonerationVORowImpl obj) {
                return obj.getIdInscriptionPedagogique();
            }

            protected void put(ExonerationVORowImpl obj, Object value) {
                obj.setIdInscriptionPedagogique((Long) value);
            }
        }
        ,
        LibelleFormation {
            protected Object get(ExonerationVORowImpl obj) {
                return obj.getLibelleFormation();
            }

            protected void put(ExonerationVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LibelleAnnee {
            protected Object get(ExonerationVORowImpl obj) {
                return obj.getLibelleAnnee();
            }

            protected void put(ExonerationVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ListeInsPedExonerationROVO {
            protected Object get(ExonerationVORowImpl obj) {
                return obj.getListeInsPedExonerationROVO();
            }

            protected void put(ExonerationVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        InfoExonerationROVO {
            protected Object get(ExonerationVORowImpl obj) {
                return obj.getInfoExonerationROVO();
            }

            protected void put(ExonerationVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TypeExonerationVO1 {
            protected Object get(ExonerationVORowImpl obj) {
                return obj.getTypeExonerationVO1();
            }

            protected void put(ExonerationVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        NatureExonerationVO1 {
            protected Object get(ExonerationVORowImpl obj) {
                return obj.getNatureExonerationVO1();
            }

            protected void put(ExonerationVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MotifExonerationVO1 {
            protected Object get(ExonerationVORowImpl obj) {
                return obj.getMotifExonerationVO1();
            }

            protected void put(ExonerationVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        protected abstract Object get(ExonerationVORowImpl object);

        protected abstract void put(ExonerationVORowImpl object, Object value);

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int IDEXONERATION = AttributesEnum.IdExoneration.index();
    public static final int IDTYPEEXONERATION = AttributesEnum.IdTypeExoneration.index();
    public static final int IDNATUREEXONERATION = AttributesEnum.IdNatureExoneration.index();
    public static final int IDMOTIFEXONERATION = AttributesEnum.IdMotifExoneration.index();
    public static final int IDANNEESUNIVERS = AttributesEnum.IdAnneesUnivers.index();
    public static final int TAUX = AttributesEnum.Taux.index();
    public static final int MONTANT = AttributesEnum.Montant.index();
    public static final int REFEXO = AttributesEnum.RefExo.index();
    public static final int DATECREATION = AttributesEnum.DateCreation.index();
    public static final int DATEMODIFICATION = AttributesEnum.DateModification.index();
    public static final int UTICREE = AttributesEnum.UtiCree.index();
    public static final int UTIMODIFIE = AttributesEnum.UtiModifie.index();
    public static final int IDINSCRIPTIONPEDAGOGIQUE = AttributesEnum.IdInscriptionPedagogique.index();
    public static final int LIBELLEFORMATION = AttributesEnum.LibelleFormation.index();
    public static final int LIBELLEANNEE = AttributesEnum.LibelleAnnee.index();
    public static final int LISTEINSPEDEXONERATIONROVO = AttributesEnum.ListeInsPedExonerationROVO.index();
    public static final int INFOEXONERATIONROVO = AttributesEnum.InfoExonerationROVO.index();
    public static final int TYPEEXONERATIONVO1 = AttributesEnum.TypeExonerationVO1.index();
    public static final int NATUREEXONERATIONVO1 = AttributesEnum.NatureExonerationVO1.index();
    public static final int MOTIFEXONERATIONVO1 = AttributesEnum.MotifExonerationVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ExonerationVORowImpl() {
    }

    /**
     * Gets ExonerationEO entity object.
     * @return the ExonerationEO
     */
    public EntityImpl getExonerationEO() {
        return (EntityImpl) getEntity(ENTITY_EXONERATIONEO);
    }

    /**
     * Gets the attribute value for ID_EXONERATION using the alias name IdExoneration.
     * @return the ID_EXONERATION
     */
    public DBSequence getIdExoneration() {
        return (DBSequence) getAttributeInternal(IDEXONERATION);
    }

    /**
     * Sets <code>value</code> as attribute value for ID_EXONERATION using the alias name IdExoneration.
     * @param value value to set the ID_EXONERATION
     */
    public void setIdExoneration(DBSequence value) {
        setAttributeInternal(IDEXONERATION, value);
    }

    /**
     * Gets the attribute value for ID_TYPE_EXONERATION using the alias name IdTypeExoneration.
     * @return the ID_TYPE_EXONERATION
     */
    public DBSequence getIdTypeExoneration() {
        return (DBSequence) getAttributeInternal(IDTYPEEXONERATION);
    }

    /**
     * Sets <code>value</code> as attribute value for ID_TYPE_EXONERATION using the alias name IdTypeExoneration.
     * @param value value to set the ID_TYPE_EXONERATION
     */
    public void setIdTypeExoneration(DBSequence value) {
        setAttributeInternal(IDTYPEEXONERATION, value);
    }

    /**
     * Gets the attribute value for ID_NATURE_EXONERATION using the alias name IdNatureExoneration.
     * @return the ID_NATURE_EXONERATION
     */
    public DBSequence getIdNatureExoneration() {
        return (DBSequence) getAttributeInternal(IDNATUREEXONERATION);
    }

    /**
     * Sets <code>value</code> as attribute value for ID_NATURE_EXONERATION using the alias name IdNatureExoneration.
     * @param value value to set the ID_NATURE_EXONERATION
     */
    public void setIdNatureExoneration(DBSequence value) {
        setAttributeInternal(IDNATUREEXONERATION, value);
    }

    /**
     * Gets the attribute value for ID_MOTIF_EXONERATION using the alias name IdMotifExoneration.
     * @return the ID_MOTIF_EXONERATION
     */
    public DBSequence getIdMotifExoneration() {
        return (DBSequence) getAttributeInternal(IDMOTIFEXONERATION);
    }

    /**
     * Sets <code>value</code> as attribute value for ID_MOTIF_EXONERATION using the alias name IdMotifExoneration.
     * @param value value to set the ID_MOTIF_EXONERATION
     */
    public void setIdMotifExoneration(DBSequence value) {
        setAttributeInternal(IDMOTIFEXONERATION, value);
    }

    /**
     * Gets the attribute value for ID_ANNEES_UNIVERS using the alias name IdAnneesUnivers.
     * @return the ID_ANNEES_UNIVERS
     */
    public Long getIdAnneesUnivers() {
        return (Long) getAttributeInternal(IDANNEESUNIVERS);
    }

    /**
     * Sets <code>value</code> as attribute value for ID_ANNEES_UNIVERS using the alias name IdAnneesUnivers.
     * @param value value to set the ID_ANNEES_UNIVERS
     */
    public void setIdAnneesUnivers(Long value) {
        setAttributeInternal(IDANNEESUNIVERS, value);
    }

    /**
     * Gets the attribute value for TAUX using the alias name Taux.
     * @return the TAUX
     */
    public BigDecimal getTaux() {
        return (BigDecimal) getAttributeInternal(TAUX);
    }

    /**
     * Sets <code>value</code> as attribute value for TAUX using the alias name Taux.
     * @param value value to set the TAUX
     */
    public void setTaux(BigDecimal value) {
        setAttributeInternal(TAUX, value);
    }

    /**
     * Gets the attribute value for MONTANT using the alias name Montant.
     * @return the MONTANT
     */
    public Long getMontant() {
        return (Long) getAttributeInternal(MONTANT);
    }

    /**
     * Sets <code>value</code> as attribute value for MONTANT using the alias name Montant.
     * @param value value to set the MONTANT
     */
    public void setMontant(Long value) {
        setAttributeInternal(MONTANT, value);
    }

    /**
     * Gets the attribute value for REF_EXO using the alias name RefExo.
     * @return the REF_EXO
     */
    public String getRefExo() {
        return (String) getAttributeInternal(REFEXO);
    }

    /**
     * Sets <code>value</code> as attribute value for REF_EXO using the alias name RefExo.
     * @param value value to set the REF_EXO
     */
    public void setRefExo(String value) {
        setAttributeInternal(REFEXO, value);
    }

    /**
     * Gets the attribute value for DATE_CREATION using the alias name DateCreation.
     * @return the DATE_CREATION
     */
    public Timestamp getDateCreation() {
        return (Timestamp) getAttributeInternal(DATECREATION);
    }

    /**
     * Sets <code>value</code> as attribute value for DATE_CREATION using the alias name DateCreation.
     * @param value value to set the DATE_CREATION
     */
    public void setDateCreation(Timestamp value) {
        setAttributeInternal(DATECREATION, value);
    }

    /**
     * Gets the attribute value for DATE_MODIFICATION using the alias name DateModification.
     * @return the DATE_MODIFICATION
     */
    public Timestamp getDateModification() {
        return (Timestamp) getAttributeInternal(DATEMODIFICATION);
    }

    /**
     * Sets <code>value</code> as attribute value for DATE_MODIFICATION using the alias name DateModification.
     * @param value value to set the DATE_MODIFICATION
     */
    public void setDateModification(Timestamp value) {
        setAttributeInternal(DATEMODIFICATION, value);
    }

    /**
     * Gets the attribute value for UTI_CREE using the alias name UtiCree.
     * @return the UTI_CREE
     */
    public Long getUtiCree() {
        return (Long) getAttributeInternal(UTICREE);
    }

    /**
     * Sets <code>value</code> as attribute value for UTI_CREE using the alias name UtiCree.
     * @param value value to set the UTI_CREE
     */
    public void setUtiCree(Long value) {
        setAttributeInternal(UTICREE, value);
    }

    /**
     * Gets the attribute value for UTI_MODIFIE using the alias name UtiModifie.
     * @return the UTI_MODIFIE
     */
    public Long getUtiModifie() {
        return (Long) getAttributeInternal(UTIMODIFIE);
    }

    /**
     * Sets <code>value</code> as attribute value for UTI_MODIFIE using the alias name UtiModifie.
     * @param value value to set the UTI_MODIFIE
     */
    public void setUtiModifie(Long value) {
        setAttributeInternal(UTIMODIFIE, value);
    }

    /**
     * Gets the attribute value for ID_INSCRIPTION_PEDAGOGIQUE using the alias name IdInscriptionPedagogique.
     * @return the ID_INSCRIPTION_PEDAGOGIQUE
     */
    public Long getIdInscriptionPedagogique() {
        return (Long) getAttributeInternal(IDINSCRIPTIONPEDAGOGIQUE);
    }

    /**
     * Sets <code>value</code> as attribute value for ID_INSCRIPTION_PEDAGOGIQUE using the alias name IdInscriptionPedagogique.
     * @param value value to set the ID_INSCRIPTION_PEDAGOGIQUE
     */
    public void setIdInscriptionPedagogique(Long value) {
        setAttributeInternal(IDINSCRIPTIONPEDAGOGIQUE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LibelleFormation.
     * @return the LibelleFormation
     */
    public String getLibelleFormation() {
        return (String) getInfoExonerationROVO().getAttribute("LibForm").toString();
    }

    /**
     * Gets the attribute value for the calculated attribute LibelleAnnee.
     * @return the LibelleAnnee
     */
    public String getLibelleAnnee() {
        return (String) getInfoExonerationROVO().getAttribute("LibAnnee").toString();
    }

    /**
     * Gets the associated <code>ListeInsPedExonerationROVORowImpl</code> using master-detail link ListeInsPedExonerationROVO.
     */
    public ListeInsPedExonerationROVORowImpl getListeInsPedExonerationROVO() {
        return (ListeInsPedExonerationROVORowImpl) getAttributeInternal(LISTEINSPEDEXONERATIONROVO);
    }

    /**
     * Sets the master-detail link ListeInsPedExonerationROVO between this object and <code>value</code>.
     */
    public void setListeInsPedExonerationROVO(ListeInsPedExonerationROVORowImpl value) {
        setAttributeInternal(LISTEINSPEDEXONERATIONROVO, value);
    }

    /**
     * Gets the associated <code>InfoExonerationROVORowImpl</code> using master-detail link InfoExonerationROVO.
     */
    public InfoExonerationROVORowImpl getInfoExonerationROVO() {
        return (InfoExonerationROVORowImpl) getAttributeInternal(INFOEXONERATIONROVO);
    }

    /**
     * Sets the master-detail link InfoExonerationROVO between this object and <code>value</code>.
     */
    public void setInfoExonerationROVO(InfoExonerationROVORowImpl value) {
        setAttributeInternal(INFOEXONERATIONROVO, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> TypeExonerationVO1.
     */
    public RowSet getTypeExonerationVO1() {
        return (RowSet) getAttributeInternal(TYPEEXONERATIONVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> NatureExonerationVO1.
     */
    public RowSet getNatureExonerationVO1() {
        return (RowSet) getAttributeInternal(NATUREEXONERATIONVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> MotifExonerationVO1.
     */
    public RowSet getMotifExonerationVO1() {
        return (RowSet) getAttributeInternal(MOTIFEXONERATIONVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

