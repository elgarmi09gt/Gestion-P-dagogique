package view.beans.paramSup.accesue;

import java.util.ArrayList;

import java.util.Map;

import javax.faces.context.FacesContext;

import javax.faces.event.ActionEvent;
import javax.faces.event.ValueChangeEvent;

import oracle.adf.model.BindingContext;

import oracle.adf.model.binding.DCIteratorBinding;
import oracle.adf.share.ADFContext;
import oracle.adf.view.rich.component.rich.RichPopup;
import oracle.adf.view.rich.component.rich.data.RichTable;
import oracle.adf.view.rich.component.rich.input.RichSelectOneRadio;
import oracle.adf.view.rich.context.AdfFacesContext;

import oracle.binding.AttributeBinding;
import oracle.binding.BindingContainer;

import oracle.binding.OperationBinding;

import oracle.jbo.Row;

import org.apache.myfaces.trinidad.event.AttributeChangeEvent;

public class UesAcessBean {
    private RichSelectOneRadio roleChecked;
    private RichTable ueTable;
    private RichTable ueAccesTable;
    Map sessionScope = ADFContext.getCurrent().getSessionScope();
    private Integer anne_univers = Integer.parseInt(sessionScope.get("id_annee").toString());
    private Integer utilisateur = Integer.parseInt(sessionScope.get("id_user").toString());
    private Integer id_hs = Integer.parseInt(sessionScope.get("id_hs").toString());
    
    public UesAcessBean() {
    }

    @SuppressWarnings("unchecked")
    public void OnUserValueChangeListener(ValueChangeEvent valueChangeEvent) {
        BindingContainer container = BindingContext.getCurrent().getCurrentBindingsEntry();
        valueChangeEvent.getComponent().processUpdates(FacesContext.getCurrentInstance());
        AttributeBinding attrIdBinding = (AttributeBinding) container.getControlBinding("IdUtilisateur");
        Integer Id = (Integer.parseInt(attrIdBinding.getInputValue().toString()));
        System.out.println("Id User " + Id);
        OperationBinding lesUes = BindingContext.getCurrent()
                                                .getCurrentBindingsEntry()
                                                .getOperationBinding("GetUeAcces");
       
        lesUes.getParamsMap().put("annee", getAnne_univers());
        lesUes.getParamsMap().put("uti", Id);
        lesUes.getParamsMap().put("id_hs", getId_hs());
        lesUes.execute();
        
        OperationBinding lesaccesUes = BindingContext.getCurrent()
                                                     .getCurrentBindingsEntry()
                                                     .getOperationBinding("GetAccesUe");
        lesaccesUes.getParamsMap().put("annee", getAnne_univers());
        lesaccesUes.getParamsMap().put("uti", Id);
        lesaccesUes.getParamsMap().put("id_hs", getId_hs());
        lesaccesUes.execute();

        AdfFacesContext.getCurrentInstance().addPartialTarget(this.getUeTable());
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.getUeAccesTable());
    }

    public BindingContainer getBindings() {
        return BindingContext.getCurrent().getCurrentBindingsEntry();
    }

    @SuppressWarnings("unchecked")
    public void OnSaveClicked(ActionEvent actionEvent) {
        // Il peut etre important de verifier si l'acces n'est pas encore autorisé avant d'enregistrer une autorisation
        BindingContainer bindings = getBindings();
        DCIteratorBinding iterUser = (DCIteratorBinding) BindingContext.getCurrent()
                                                                   .getCurrentBindingsEntry()
                                                                   .get("UtilisateurStructureIterator");
        Row currentuser = iterUser.getCurrentRow();
        Integer IdUser = Integer.parseInt(currentuser.getAttribute("IdUtilisateur").toString());
        try {
            OperationBinding uesSelected = bindings.getOperationBinding("getSelectedUes");
            ArrayList<Long> ues = (ArrayList<Long>) uesSelected.execute();
            if (ues.size() != 0) {
                // Pour chaque utilisateur lui accorder les accees choisies
                for (int uecounter = 0; uecounter < ues.size(); uecounter++) {
                    //Verifié si l'acces est déja autorisé
                    OperationBinding isAllowAcces = bindings.getOperationBinding("IsUeAccesAllowed");
                    isAllowAcces.getParamsMap().put("s_id", getId_hs());
                    isAllowAcces.getParamsMap().put("uti", IdUser);
                    /*
                    isAllowAcces.getParamsMap().put("role", this.getRoleChecked()
                                                                .getValue()
                                                                .toString()); */
                    isAllowAcces.getParamsMap().put("fil_ue", ues.get(uecounter));
                    isAllowAcces.getParamsMap().put("annee", getAnne_univers());

                    Object resul = isAllowAcces.execute();
                    DCIteratorBinding iterUeAccess = (DCIteratorBinding) BindingContext.getCurrent()
                                                             .getCurrentBindingsEntry()
                                                             .get("IsUeAccesAllowedROVOIterator");
                    Row crnt = iterUeAccess.getCurrentRow();
                    if (crnt == null) {
                        // L'utilisateur n'a pas encore acces a cette ue
                        // Verifier le type d'acces
                        if (this.getRoleChecked().getValue().toString().equals("RESPONSABLE UE")) {
                            // Verifier si l'ue n'a pas de responsable déja
                            OperationBinding is_resp_ue = bindings.getOperationBinding("IsUeResponsableExist");     
                            is_resp_ue.getParamsMap().put("s_id", getId_hs());
                            is_resp_ue.getParamsMap().put("fil_ue", ues.get(uecounter));
                            is_resp_ue.getParamsMap().put("annee", getAnne_univers());
                            is_resp_ue.execute();
                            DCIteratorBinding iterIsResponsable = (DCIteratorBinding) BindingContext.getCurrent()
                                                                     .getCurrentBindingsEntry()
                                                                     .get("IsResponsableUeExistIterator");
                            Row is_exist_resp = iterIsResponsable.getCurrentRow();
                            if (is_exist_resp == null) {
                                OperationBinding opAllowAcces = bindings.getOperationBinding("AllowedAccessTo");
                                opAllowAcces.getParamsMap().put("IdUtilisateur", IdUser);
                                opAllowAcces.getParamsMap().put("UtiCree", getUtilisateur());
                                opAllowAcces.getParamsMap().put("IdFiliereUeSemstre", ues.get(uecounter));
                                opAllowAcces.getParamsMap().put("Role", this.getRoleChecked().getValue().toString());
                                resul = opAllowAcces.execute();
                            } else {
                                // Cet ue a deja un responsble
                                System.out.println("Responsable existant pour cet ue");
                            }
                        } else {
                            // Role acces simple
                            OperationBinding opAllowAcces = bindings.getOperationBinding("AllowedAccessTo");
                            opAllowAcces.getParamsMap().put("IdUtilisateur", IdUser);
                            opAllowAcces.getParamsMap().put("UtiCree", getUtilisateur());
                            opAllowAcces.getParamsMap().put("IdFiliereUeSemstre", ues.get(uecounter));
                            opAllowAcces.getParamsMap().put("Role", this.getRoleChecked().getValue().toString());
                            resul = opAllowAcces.execute();
                        }
                    } else {
                        // if new role = RESPNSABLE UE et old role = ACCES SIMPLE
                        if (!(crnt.getAttribute("Role").toString().equals("RESPONSABLE UE")) && (this.getRoleChecked().getValue().toString().equals("RESPONSABLE UE"))) {
                            // Update possible
                            // Verifier si l'ue a un responsable
                            OperationBinding is_resp_ue = bindings.getOperationBinding("IsUeResponsableExist");
                            is_resp_ue.getParamsMap().put("s_id", getId_hs());
                            is_resp_ue.getParamsMap().put("fil_ue", ues.get(uecounter));
                            is_resp_ue.getParamsMap().put("annee", getAnne_univers());
                            is_resp_ue.execute();
                            DCIteratorBinding iterExist = (DCIteratorBinding) BindingContext.getCurrent()
                                                                     .getCurrentBindingsEntry()
                                                                     .get("IsResponsableUeExistIterator");
                            Row is_exist_resp = iterExist.getCurrentRow();
                            if (is_exist_resp == null) {
                                System.out.println("Update role required from ACCES SIMPLE to RESPNSABLE UE !!!");
                                OperationBinding updateRole = bindings.getOperationBinding("UpdateResponsableUe");
                                updateRole.getParamsMap().put("idUser", IdUser);
                                updateRole.getParamsMap().put("idFilUe", ues.get(uecounter));
                                updateRole.getParamsMap().put("role", this.getRoleChecked().getValue().toString());
                                updateRole.getParamsMap().put("utimodif", getUtilisateur());
                                updateRole.getParamsMap().put("id_uti_fil_ue",Integer.parseInt(crnt.getAttribute("IdUtilisFilierUeSem").toString()));
                                resul = updateRole.execute();
                            } else {
                                System.out.println("Responsable deja defini pour cet ue !!!");
                            }
                        } else {
                            System.out.println("Acces déja autorisé !!!");
                        }
                    }
                }
                // Tout ce passe bien On commit
                OperationBinding operationCommit = bindings.getOperationBinding("Commit");
                Object result = operationCommit.execute();

                // Réexecuter les VO pour actualiser les tableaux
                OperationBinding lesUes = BindingContext.getCurrent()
                                                        .getCurrentBindingsEntry()
                                                        .getOperationBinding("GetUeAcces");
                
                lesUes.getParamsMap().put("annee", getAnne_univers());
                lesUes.getParamsMap().put("uti", IdUser);
                lesUes.getParamsMap().put("id_hs", getId_hs());
                lesUes.execute();
                
                OperationBinding lesaccesUes = BindingContext.getCurrent()
                                                             .getCurrentBindingsEntry()
                                                             .getOperationBinding("GetAccesUe");
                lesaccesUes.getParamsMap().put("annee", getAnne_univers());
                lesaccesUes.getParamsMap().put("uti", IdUser);
                lesaccesUes.getParamsMap().put("id_hs", getId_hs());
                lesaccesUes.execute();

                AdfFacesContext.getCurrentInstance().addPartialTarget(this.getUeTable());
                AdfFacesContext.getCurrentInstance().addPartialTarget(this.getUeAccesTable());
                //AdfFacesContext.getCurrentInstance().addPartialTarget(this.getEtudiantTable());
            } else {
                System.out.println("Pas d'ue selectionner");
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }

    }

    public void setRoleChecked(RichSelectOneRadio roleChecked) {
        this.roleChecked = roleChecked;
    }

    public RichSelectOneRadio getRoleChecked() {
        return roleChecked;
    }

    public void setUeTable(RichTable ueTable) {
        this.ueTable = ueTable;
    }

    public RichTable getUeTable() {
        return ueTable;
    }

    public void setUeAccesTable(RichTable ueAccesTable) {
        this.ueAccesTable = ueAccesTable;
    }

    public RichTable getUeAccesTable() {
        return ueAccesTable;
    }

    public void setAnne_univers(Integer anne_univers) {
        this.anne_univers = anne_univers;
    }

    public Integer getAnne_univers() {
        return anne_univers;
    }

    public void setUtilisateur(Integer utilisateur) {
        this.utilisateur = utilisateur;
    }

    public Integer getUtilisateur() {
        return utilisateur;
    }

    public void setId_hs(Integer id_hs) {
        this.id_hs = id_hs;
    }

    public Integer getId_hs() {
        return id_hs;
    }
}
