package view.beans.maquette;

import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;

import oracle.adf.model.BindingContext;
import oracle.adf.model.binding.DCIteratorBinding;
import oracle.adf.share.ADFContext;
import oracle.adf.view.rich.component.rich.RichPopup;
import oracle.adf.view.rich.component.rich.data.RichTable;

import oracle.adf.view.rich.context.AdfFacesContext;
import oracle.adf.view.rich.event.DialogEvent;

import oracle.adf.view.rich.event.DialogEvent.Outcome;
import oracle.adf.view.rich.render.ClientEvent;

import oracle.binding.BindingContainer;
import oracle.binding.OperationBinding;

import oracle.jbo.Row;

public class MaquetteBean {
    final String OLD_CURR_KEY_VIEWSCOPE_ATTR = "__oldCurrentRowKey__";
    private RichTable ueTable;
    private RichTable ecTable;
    private RichTable maquetteTable;
    private RichTable filiereUeSemestreTable;
    private RichTable filiereUeSemestreEcTable;
    private RichPopup popupNewUe;
    private RichPopup popupEditUe;
    private RichPopup popupNewEc;
    private RichPopup popupEditEc;
    private RichPopup popupNewMaquette;
    private RichPopup popupEditMaquette;
    private RichPopup popupNewFiliereUeSemestre;
    private RichPopup popupEditFiliereUeSemestre;
    private RichPopup popupNewFiliereUeSemestreEc;
    private RichPopup popupEditFiliereUeSemestreEc;
    private RichTable nivFormTable;
    private RichPopup popupNewNivForm;
    private RichPopup popupEditNivForm;
    private RichPopup popupDeleteNivForm;

    public MaquetteBean() {
    }

    public void setUeTable(RichTable ueTable) {
        this.ueTable = ueTable;
    }

    public RichTable getUeTable() {
        return ueTable;
    }

    public void setEcTable(RichTable ecTable) {
        this.ecTable = ecTable;
    }

    public RichTable getEcTable() {
        return ecTable;
    }

    public void setMaquetteTable(RichTable maquetteTable) {
        this.maquetteTable = maquetteTable;
    }

    public RichTable getMaquetteTable() {
        return maquetteTable;
    }

    public void setFiliereUeSemestreTable(RichTable filiereUeSemestreTable) {
        this.filiereUeSemestreTable = filiereUeSemestreTable;
    }

    public RichTable getFiliereUeSemestreTable() {
        return filiereUeSemestreTable;
    }

    public void setFiliereUeSemestreEcTable(RichTable filiereUeSemestreEcTable) {
        this.filiereUeSemestreEcTable = filiereUeSemestreEcTable;
    }

    public RichTable getFiliereUeSemestreEcTable() {
        return filiereUeSemestreEcTable;
    }

    public void setPopupNewUe(RichPopup popupNewUe) {
        this.popupNewUe = popupNewUe;
    }

    public RichPopup getPopupNewUe() {
        return popupNewUe;
    }

    public void setPopupEditUe(RichPopup popupEditUe) {
        this.popupEditUe = popupEditUe;
    }

    public RichPopup getPopupEditUe() {
        return popupEditUe;
    }

    public void setPopupNewEc(RichPopup popupNewEc) {
        this.popupNewEc = popupNewEc;
    }

    public RichPopup getPopupNewEc() {
        return popupNewEc;
    }

    public void setPopupEditEc(RichPopup popupEditEc) {
        this.popupEditEc = popupEditEc;
    }

    public RichPopup getPopupEditEc() {
        return popupEditEc;
    }

    public void setPopupNewMaquette(RichPopup popupNewMaquette) {
        this.popupNewMaquette = popupNewMaquette;
    }

    public RichPopup getPopupNewMaquette() {
        return popupNewMaquette;
    }

    public void setPopupEditMaquette(RichPopup popupEditMaquette) {
        this.popupEditMaquette = popupEditMaquette;
    }

    public RichPopup getPopupEditMaquette() {
        return popupEditMaquette;
    }

    public void setPopupNewFiliereUeSemestre(RichPopup popupNewFiliereUeSemestre) {
        this.popupNewFiliereUeSemestre = popupNewFiliereUeSemestre;
    }

    public RichPopup getPopupNewFiliereUeSemestre() {
        return popupNewFiliereUeSemestre;
    }

    public void setPopupEditFiliereUeSemestre(RichPopup popupEditFiliereUeSemestre) {
        this.popupEditFiliereUeSemestre = popupEditFiliereUeSemestre;
    }

    public RichPopup getPopupEditFiliereUeSemestre() {
        return popupEditFiliereUeSemestre;
    }

    public void setPopupNewFiliereUeSemestreEc(RichPopup popupNewFiliereUeSemestreEc) {
        this.popupNewFiliereUeSemestreEc = popupNewFiliereUeSemestreEc;
    }

    public RichPopup getPopupNewFiliereUeSemestreEc() {
        return popupNewFiliereUeSemestreEc;
    }

    public void setPopupEditFiliereUeSemestreEc(RichPopup popupEditFiliereUeSemestreEc) {
        this.popupEditFiliereUeSemestreEc = popupEditFiliereUeSemestreEc;
    }

    public RichPopup getPopupEditFiliereUeSemestreEc() {
        return popupEditFiliereUeSemestreEc;
    }

    public BindingContainer getBindings() {
        return BindingContext.getCurrent().getCurrentBindingsEntry();
    }
    
    public void OnNewUeClicked(ActionEvent actionEvent) {
        // Add event code here...
        BindingContainer bindings = getBindings();
        DCIteratorBinding dciter = (DCIteratorBinding) bindings.get("UesIterator");
        Row oldCcurrentRow = dciter.getCurrentRow();
        if(oldCcurrentRow != null){
            ADFContext adfCtx = ADFContext.getCurrent();
            adfCtx.getViewScope().put(OLD_CURR_KEY_VIEWSCOPE_ATTR, oldCcurrentRow.getKey().toStringFormat(true));
        }
        //perform row create
        OperationBinding operationBinding = bindings.getOperationBinding("CreateUe");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return;
        }
        RichPopup popup = this.getPopupNewUe();
        RichPopup.PopupHints hints = new RichPopup.PopupHints();
        //empty hints renders dialog in center of screen
        popup.show(hints);
        return;
    }

    public void OnEditUeClicked(ActionEvent actionEvent) {
        // Add event code here...
        RichPopup popup = this.getPopupEditUe();
        RichPopup.PopupHints hints = new RichPopup.PopupHints();
        //empty hints renders dialog in center of screen
        popup.show(hints);
    }

    public void OnNewEcClicked(ActionEvent actionEvent) {
        // Add event code here...
        BindingContainer bindings = getBindings();
        DCIteratorBinding dciter = (DCIteratorBinding) bindings.get("EcsIterator");
        Row oldCcurrentRow = dciter.getCurrentRow();
        if(oldCcurrentRow != null){
            ADFContext adfCtx = ADFContext.getCurrent();
            adfCtx.getViewScope().put(OLD_CURR_KEY_VIEWSCOPE_ATTR, oldCcurrentRow.getKey().toStringFormat(true));
        }
        //perform row create
        OperationBinding operationBinding = bindings.getOperationBinding("CreateEc");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return;
        }
        RichPopup popup = this.getPopupNewEc();
        RichPopup.PopupHints hints = new RichPopup.PopupHints();
        //empty hints renders dialog in center of screen
        popup.show(hints);
        return;
    }

    public void OnEditEcClicked(ActionEvent actionEvent) {
        // Add event code here...
        RichPopup popup = this.getPopupEditEc();
        RichPopup.PopupHints hints = new RichPopup.PopupHints();
        //empty hints renders dialog in center of screen
        popup.show(hints);
    }

    public void OnNewMaquetteClicked(ActionEvent actionEvent) {
        // Add event code here...
        BindingContainer bindings = getBindings();
        DCIteratorBinding dciter = (DCIteratorBinding) bindings.get("MaquettesIterator");
        Row oldCcurrentRow = dciter.getCurrentRow();
        if(oldCcurrentRow != null){
            ADFContext adfCtx = ADFContext.getCurrent();
            adfCtx.getViewScope().put(OLD_CURR_KEY_VIEWSCOPE_ATTR, oldCcurrentRow.getKey().toStringFormat(true));
        }
         //perform row create
        OperationBinding operationBinding = bindings.getOperationBinding("CreateMaquette");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return;
        }
        RichPopup popup = this.getPopupNewMaquette();
        RichPopup.PopupHints hints = new RichPopup.PopupHints();
        //empty hints renders dialog in center of screen
        popup.show(hints);
        return;
    }

    public void OnEditMaquetteClicked(ActionEvent actionEvent) {
        // Add event code here...
        RichPopup popup = this.getPopupEditMaquette();
        RichPopup.PopupHints hints = new RichPopup.PopupHints();
        //empty hints renders dialog in center of screen
        popup.show(hints);
    }

    public void OnNewFiliereUeSemestreClicked(ActionEvent actionEvent) {
        // Add event code here...
        BindingContainer bindings = getBindings();
        DCIteratorBinding dciter = (DCIteratorBinding) bindings.get("FiliereUeSemstresIterator");
        Row oldCcurrentRow = dciter.getCurrentRow();
        if(oldCcurrentRow != null){
            ADFContext adfCtx = ADFContext.getCurrent();
            adfCtx.getViewScope().put(OLD_CURR_KEY_VIEWSCOPE_ATTR, oldCcurrentRow.getKey().toStringFormat(true));
        }
        // adfCtx.getViewScope().put(OLD_CURR_KEY_VIEWSCOPE_ATTR, oldCcurrentRow.getKey().toStringFormat(true));
        //perform row create
        OperationBinding operationBinding = bindings.getOperationBinding("CreateFiliereUeSemestre");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return;
        }
        RichPopup popup = this.getPopupNewFiliereUeSemestre();
        RichPopup.PopupHints hints = new RichPopup.PopupHints();
        //empty hints renders dialog in center of screen
        popup.show(hints);
        return;
    }

    public void OnEditFiliereUeSemestreClicked(ActionEvent actionEvent) {
        // Add event code here...
        RichPopup popup = this.getPopupEditFiliereUeSemestre();
        RichPopup.PopupHints hints = new RichPopup.PopupHints();
        //empty hints renders dialog in center of screen
        popup.show(hints);
    }

    public void OnNewFiliereUeSemestreEcClicked(ActionEvent actionEvent) {
        // Add event code here...
        BindingContainer bindings = getBindings();
        DCIteratorBinding dciter = (DCIteratorBinding) bindings.get("FiliereUeSemstreEcIterator");
        Row oldCcurrentRow = dciter.getCurrentRow();
        if(oldCcurrentRow != null){
            ADFContext adfCtx = ADFContext.getCurrent();
            adfCtx.getViewScope().put(OLD_CURR_KEY_VIEWSCOPE_ATTR, oldCcurrentRow.getKey().toStringFormat(true));
        }
        //perform row create
        OperationBinding operationBinding = bindings.getOperationBinding("CreateFiliereUeSemestreEc");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return;
        }
        RichPopup popup = this.getPopupNewFiliereUeSemestreEc();
        RichPopup.PopupHints hints = new RichPopup.PopupHints();
        //empty hints renders dialog in center of screen
        popup.show(hints);
        return;
    }

    public void OnEditFiliereUeSemestreEcClicked(ActionEvent actionEvent) {
        // Add event code here...
        RichPopup popup = this.getPopupEditFiliereUeSemestreEc();
        RichPopup.PopupHints hints = new RichPopup.PopupHints();
        //empty hints renders dialog in center of screen
        popup.show(hints);
    }

    public void OnDialogAction(DialogEvent dialogEvent) {
        // Add event code here...
        Outcome outcome = dialogEvent.getOutcome();
        if (outcome == Outcome.ok) {
            //commit
            BindingContainer bindings = getBindings();
            OperationBinding operationBinding = bindings.getOperationBinding("Commit");
            Object result = operationBinding.execute();
            if (!operationBinding.getErrors().isEmpty()) {
                //handle errors if any
                //...
                return;
            }
            this.getPopupNewUe().hide();
            this.getPopupNewEc().hide();
            this.getPopupEditUe().hide();
            this.getPopupEditEc().hide();
            this.getPopupNewMaquette().hide();
            this.getPopupNewFiliereUeSemestre().hide();
            this.getPopupEditMaquette().hide();
            this.getPopupEditFiliereUeSemestre().hide();
            this.getPopupNewFiliereUeSemestreEc().hide();
            this.getPopupEditFiliereUeSemestreEc().hide();
            this.getPopupNewNivForm().hide();
            this.getPopupEditNivForm().hide();
            AdfFacesContext.getCurrentInstance().addPartialTarget(this.getUeTable());
            AdfFacesContext.getCurrentInstance().addPartialTarget(this.getEcTable());
            AdfFacesContext.getCurrentInstance().addPartialTarget(this.getMaquetteTable());
            AdfFacesContext.getCurrentInstance().addPartialTarget(this.getFiliereUeSemestreTable());
            AdfFacesContext.getCurrentInstance().addPartialTarget(this.getFiliereUeSemestreEcTable());
            AdfFacesContext.getCurrentInstance().addPartialTarget(this.getNivFormTable());
        }
    }

    public void OnUeDialogCancel(ClientEvent clientEvent) {
        // Add event code here...
        BindingContainer bindings = getBindings();
        this.getPopupNewUe().hide();
        this.getPopupEditUe().hide();
        DCIteratorBinding dciter = (DCIteratorBinding) bindings.get("UesIterator");
        Row currentRow = dciter.getCurrentRow();
        dciter.removeCurrentRow();
        //set current row back to original row
        ADFContext adfCtx = ADFContext.getCurrent();
        String oldCurrentRowKey = (String) adfCtx.getViewScope().get(OLD_CURR_KEY_VIEWSCOPE_ATTR);
        dciter.setCurrentRowWithKey(oldCurrentRowKey);
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.getUeTable());
        FacesContext fctx = FacesContext.getCurrentInstance();
        fctx.renderResponse();
    }
    public void OnEcDialogCancel(ClientEvent clientEvent) {
        // Add event code here...
        BindingContainer bindings = getBindings();
        this.getPopupNewEc().hide();
        this.getPopupEditEc().hide();
        DCIteratorBinding dciter = (DCIteratorBinding) bindings.get("EcsIterator");
        Row currentRow = dciter.getCurrentRow();
        dciter.removeCurrentRow();
        //set current row back to original row
        ADFContext adfCtx = ADFContext.getCurrent();
        String oldCurrentRowKey = (String) adfCtx.getViewScope().get(OLD_CURR_KEY_VIEWSCOPE_ATTR);
        dciter.setCurrentRowWithKey(oldCurrentRowKey);
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.getEcTable());
        FacesContext fctx = FacesContext.getCurrentInstance();
        fctx.renderResponse();
    }
    public void OnMaquetteDialogCancel(ClientEvent clientEvent) {
        // Add event code here...
        BindingContainer bindings = getBindings();
        RichPopup popup = this.getPopupNewMaquette();
        popup.hide();
        //the cancel operation is executed with immediate=true to bypass the
        //model update. Therefore we manually delete the new row from the
        //iterator
        DCIteratorBinding dciter = (DCIteratorBinding) bindings.get("MaquettesIterator");
        Row currentRow = dciter.getCurrentRow();
        dciter.removeCurrentRow();
        //set current row back to original row
        ADFContext adfCtx = ADFContext.getCurrent();
        String oldCurrentRowKey = (String) adfCtx.getViewScope().get(OLD_CURR_KEY_VIEWSCOPE_ATTR);
        dciter.setCurrentRowWithKey(oldCurrentRowKey);
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.getMaquetteTable());
        FacesContext fctx = FacesContext.getCurrentInstance();
        //we don't want to continue with the remainder of the lifecycle and
        //thus skip the rest
        fctx.renderResponse();
    }
    public void OnFiliereUeSemestreDialogCancel(ClientEvent clientEvent) {
        // Add event code here...
        BindingContainer bindings = getBindings();
        RichPopup popup = this.getPopupNewFiliereUeSemestre();
        popup.hide();
        //the cancel operation is executed with immediate=true to bypass the
        //model update. Therefore we manually delete the new row from the
        //iterator
        DCIteratorBinding dciter = (DCIteratorBinding) bindings.get("FiliereUeSemstresIterator");
        Row currentRow = dciter.getCurrentRow();
        dciter.removeCurrentRow();
        //set current row back to original row
        ADFContext adfCtx = ADFContext.getCurrent();
        String oldCurrentRowKey = (String) adfCtx.getViewScope().get(OLD_CURR_KEY_VIEWSCOPE_ATTR);
        dciter.setCurrentRowWithKey(oldCurrentRowKey);
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.getFiliereUeSemestreTable());
        FacesContext fctx = FacesContext.getCurrentInstance();
        //we don't want to continue with the remainder of the lifecycle and
        //thus skip the rest
        fctx.renderResponse();
    }
    public void OnFiliereUeSemEcDialogCancel(ClientEvent clientEvent) {
        // Add event code here...
        BindingContainer bindings = getBindings();
        RichPopup popup = this.getPopupNewFiliereUeSemestreEc();
        popup.hide();
        //the cancel operation is executed with immediate=true to bypass the
        //model update. Therefore we manually delete the new row from the
        //iterator
        DCIteratorBinding dciter = (DCIteratorBinding) bindings.get("FiliereUeSemstreEcIterator");
        Row currentRow = dciter.getCurrentRow();
        dciter.removeCurrentRow();
        //set current row back to original row
        ADFContext adfCtx = ADFContext.getCurrent();
        String oldCurrentRowKey = (String) adfCtx.getViewScope().get(OLD_CURR_KEY_VIEWSCOPE_ATTR);
        dciter.setCurrentRowWithKey(oldCurrentRowKey);
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.getFiliereUeSemestreEcTable());
        FacesContext fctx = FacesContext.getCurrentInstance();
        //we don't want to continue with the remainder of the lifecycle and
        //thus skip the rest
        fctx.renderResponse();
    }

    public String OnDeleteUeClicked() {
        // Add event code here...
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("DeleteUe");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        } else {
            OperationBinding operationCommit = bindings.getOperationBinding("Commit");
            Object commitResult = operationCommit.execute();
            AdfFacesContext.getCurrentInstance().addPartialTarget(this.getUeTable());
            return null;
        }
    }

    public String OnDeleteEcClick() {
        // Add event code here...
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("DeleteEc");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        } else {
            OperationBinding operationCommit = bindings.getOperationBinding("Commit");
            Object commitResult = operationCommit.execute();
            AdfFacesContext.getCurrentInstance().addPartialTarget(this.getEcTable());
            return null;
        }
    }

    public String OnDeleteMaquetteCliced() {
        // Add event code here...
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("DeleteMaquette");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        } else {
            OperationBinding operationCommit = bindings.getOperationBinding("Commit");
            Object commitResult = operationCommit.execute();
            AdfFacesContext.getCurrentInstance().addPartialTarget(this.getMaquetteTable());
            return null;
        }
    }

    public void OnDeleteUeAction(DialogEvent dialogEvent) {
        // Add event code here...
        if (dialogEvent.getOutcome().equals(Outcome.yes)) {
            OnDeleteUeClicked();
        }
    }

    public void OnDeleteEcClicked(DialogEvent dialogEvent) {
        // Add event code here...
        if (dialogEvent.getOutcome().equals(Outcome.yes)) {
            OnDeleteEcClick();
        }
    }

    public void OnDeleteMaquetteAction(DialogEvent dialogEvent) {
        // Add event code here...
        if (dialogEvent.getOutcome().equals(Outcome.yes)) {
            OnDeleteMaquetteCliced();
        }
    }

    public void setNivFormTable(RichTable nivFormTable) {
        this.nivFormTable = nivFormTable;
    }

    public RichTable getNivFormTable() {
        return nivFormTable;
    }

    public void OnNewNivFormClicked(ActionEvent actionEvent) {
        // Add event code here...
        BindingContainer bindings = getBindings();
        DCIteratorBinding dciter = (DCIteratorBinding) bindings.get("NiveauFormationMaquetteAnnesIterator");
        Row oldCcurrentRow = dciter.getCurrentRow();
        if(oldCcurrentRow != null){
            ADFContext adfCtx = ADFContext.getCurrent();
            adfCtx.getViewScope().put(OLD_CURR_KEY_VIEWSCOPE_ATTR, oldCcurrentRow.getKey().toStringFormat(true));
        }
        //perform row create
        OperationBinding operationBinding = bindings.getOperationBinding("CreateNivForm");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return;
        }
        RichPopup popup = this.getPopupNewNivForm();
        RichPopup.PopupHints hints = new RichPopup.PopupHints();
        //empty hints renders dialog in center of screen
        popup.show(hints);
        return;
    }

    public void setPopupNewNivForm(RichPopup popupNewNivForm) {
        this.popupNewNivForm = popupNewNivForm;
    }

    public RichPopup getPopupNewNivForm() {
        return popupNewNivForm;
    }

    public void OnNivFormDialogCancel(ClientEvent clientEvent) {
        // Add event code here...
        BindingContainer bindings = getBindings();
        RichPopup popup = this.getPopupNewNivForm();
        popup.hide();
        //the cancel operation is executed with immediate=true to bypass the
        //model update. Therefore we manually delete the new row from the
        //iterator
        DCIteratorBinding dciter = (DCIteratorBinding) bindings.get("NiveauFormationMaquetteAnnesIterator");
        Row currentRow = dciter.getCurrentRow();
        dciter.removeCurrentRow();
        //set current row back to original row
        ADFContext adfCtx = ADFContext.getCurrent();
        String oldCurrentRowKey = (String) adfCtx.getViewScope().get(OLD_CURR_KEY_VIEWSCOPE_ATTR);
        dciter.setCurrentRowWithKey(oldCurrentRowKey);
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.getNivFormTable());
        FacesContext fctx = FacesContext.getCurrentInstance();
        //we don't want to continue with the remainder of the lifecycle and
        //thus skip the rest
        fctx.renderResponse();
    }

    public void setPopupEditNivForm(RichPopup popupEditNivForm) {
        this.popupEditNivForm = popupEditNivForm;
    }

    public RichPopup getPopupEditNivForm() {
        return popupEditNivForm;
    }

    public void OnEditNivFormClicked(ActionEvent actionEvent) {
        // Add event code here...
        RichPopup popup = this.getPopupEditNivForm();
        RichPopup.PopupHints hints = new RichPopup.PopupHints();
        //empty hints renders dialog in center of screen
        popup.show(hints);
    }

    public String OnDeleteNivFormClicked() {
        // Add event code here...
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding = bindings.getOperationBinding("DeleteNivForm");
        Object result = operationBinding.execute();
        if (!operationBinding.getErrors().isEmpty()) {
            return null;
        } else {
            OperationBinding operationCommit = bindings.getOperationBinding("Commit");
            Object commitResult = operationCommit.execute();
            AdfFacesContext.getCurrentInstance().addPartialTarget(this.getMaquetteTable());
            return null;
        }
    }

    public void setPopupDeleteNivForm(RichPopup popupDeleteNivForm) {
        this.popupDeleteNivForm = popupDeleteNivForm;
    }

    public RichPopup getPopupDeleteNivForm() {
        return popupDeleteNivForm;
    }

    public void OnDeleteNivFormAction(DialogEvent dialogEvent) {
        // Add event code here...
        if (dialogEvent.getOutcome().equals(Outcome.yes)) {
            OnDeleteNivFormClicked();
        }
    }
}
