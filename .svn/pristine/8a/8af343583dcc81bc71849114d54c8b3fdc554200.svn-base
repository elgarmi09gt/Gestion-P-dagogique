package model.readOnlyView;

import java.math.BigDecimal;

import java.util.Map;

import oracle.adf.model.BindingContext;
import oracle.adf.model.binding.DCIteratorBinding;

//import oracle.adf.share.ADFContext;
//import oracle.adf.view.rich.context.AdfFacesContext;

import oracle.adf.share.ADFContext;

import oracle.binding.AttributeBinding;
import oracle.binding.BindingContainer;

import oracle.binding.OperationBinding;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.BFileDomain;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Dec 09 12:37:44 UTC 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TypeCompteROVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        IdTypeCompte {
            protected Object get(TypeCompteROVORowImpl obj) {
                return obj.getIdTypeCompte();
            }

            protected void put(TypeCompteROVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LibCourtType {
            protected Object get(TypeCompteROVORowImpl obj) {
                return obj.getLibCourtType();
            }

            protected void put(TypeCompteROVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LibelleType {
            protected Object get(TypeCompteROVORowImpl obj) {
                return obj.getLibelleType();
            }

            protected void put(TypeCompteROVORowImpl obj, Object value) {
                obj.setLibelleType((String) value);
            }
        }
        ,
        cocher {
            protected Object get(TypeCompteROVORowImpl obj) {
                return obj.getcocher();
            }

            protected void put(TypeCompteROVORowImpl obj, Object value) {
                obj.setcocher((Boolean) value);
            }
        }
        ,
        pourcentage {
            protected Object get(TypeCompteROVORowImpl obj) {
                return obj.getpourcentage();
            }

            protected void put(TypeCompteROVORowImpl obj, Object value) {
                obj.setpourcentage((Double) value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected abstract Object get(TypeCompteROVORowImpl object);

        protected abstract void put(TypeCompteROVORowImpl object, Object value);

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    Map sessionScope = ADFContext.getCurrent().getSessionScope();
    private String parcours = sessionScope.get("id_niv_form_parcours").toString();
    private String anne_univers = sessionScope.get("id_annee").toString();


    public static final int IDTYPECOMPTE = AttributesEnum.IdTypeCompte.index();
    public static final int LIBCOURTTYPE = AttributesEnum.LibCourtType.index();
    public static final int LIBELLETYPE = AttributesEnum.LibelleType.index();
    public static final int COCHER = AttributesEnum.cocher.index();
    public static final int POURCENTAGE = AttributesEnum.pourcentage.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TypeCompteROVORowImpl() {
    }

    public void setAnne_univers(String anne_univers) {
        this.anne_univers = anne_univers;
    }

    public String getAnne_univers() {
        return anne_univers;
    }

    /**
     * Gets the attribute value for the calculated attribute IdTypeCompte.
     * @return the IdTypeCompte
     */
    public Long getIdTypeCompte() {
        return (Long) getAttributeInternal(IDTYPECOMPTE);
    }

    /**
     * Gets the attribute value for the calculated attribute LibCourtType.
     * @return the LibCourtType
     */
    public String getLibCourtType() {
        return (String) getAttributeInternal(LIBCOURTTYPE);
    }

    /**
     * Gets the attribute value for the calculated attribute LibelleType.
     * @return the LibelleType
     */
    public String getLibelleType() {
        return (String) getAttributeInternal(LIBELLETYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LibelleType.
     * @param value value to set the  LibelleType
     */
    public void setLibelleType(String value) {
        setAttributeInternal(LIBELLETYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute cocher.
     * @return the cocher
     */
    public Boolean getcocher() {
        return (Boolean) getAttributeInternal(COCHER);
        //return getdecont();
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute cocher.
     * @param value value to set the  cocher
     */
    public void setcocher(Boolean value) {
        setAttributeInternal(COCHER, value);
    }

    /**
     * Gets the attribute value for the calculated attribute pourcentage.
     * @return the pourcentage
     */
    public Double getpourcentage() {
        return (Double) getAttributeInternal(POURCENTAGE);
        //return getdec();
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute pourcentage.
     * @param value value to set the  pourcentage
     */
    public void setpourcentage(Double value) {
        setAttributeInternal(POURCENTAGE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
    public BindingContainer getBindings() {
        return (BindingContainer) BindingContext.getCurrent().getCurrentBindingsEntry();
    }
    public Double getdec() {
        AttributeBinding id_form = (AttributeBinding) getBindings().getControlBinding("IdFormation");
        //getRechFormRep
        Double re = null;
        AttributeBinding lib_rep = (AttributeBinding) getBindings().getControlBinding("LibelleLong");
        DCIteratorBinding iter_rep = (DCIteratorBinding) getBindings().get("RepartitionROIterator");
        Row current_rep = iter_rep.getCurrentRow();
        if(current_rep != null){
            String id_rep = current_rep.getAttribute("IdRepartition").toString();
            
            OperationBinding op_rech_form_rep = getBindings().getOperationBinding("getRechFormRep");
            op_rech_form_rep.getParamsMap().put("id_rep",  id_rep);
            op_rech_form_rep.getParamsMap().put("id_form",  id_form);
            op_rech_form_rep.getParamsMap().put("id_annee",  getAnne_univers());
            op_rech_form_rep.execute();
            DCIteratorBinding iter_rep_rech = (DCIteratorBinding) getBindings().get("FormationRepartitionRechROIterator");
            Row current_rep_rech = iter_rep_rech.getCurrentRow();
            if(current_rep_rech != null){
                sessionScope.put("var_form_rep_existe", 1);
                OperationBinding op_rech_cle_rep = getBindings().getOperationBinding("getRepCleRep");
                op_rech_cle_rep.getParamsMap().put("id_rep",  id_rep);
                op_rech_cle_rep.execute();
                DCIteratorBinding iter_cle_rech = (DCIteratorBinding) getBindings().get("CleRepartitionRechROIterator");
                Row current_cle_rech = iter_cle_rech.getCurrentRow();
                if(current_cle_rech != null){

                        DCIteratorBinding iter_insc = (DCIteratorBinding) BindingContext.getCurrent().getCurrentBindingsEntry().get("CleRepartitionRechROIterator");
                        RowSetIterator rsi_insc = iter_insc.getViewObject().createRowSetIterator(null);
                        while (rsi_insc.hasNext()) {
                            Row nextRow = rsi_insc.next();
                            if(getIdTypeCompte() == Long.parseLong(nextRow.getAttribute("IdTypeCompte").toString()) ){
                                //setcocher(Boolean.TRUE);
                                re = Double.parseDouble(nextRow.getAttribute("Pourcentage").toString());
                            }
                        }
                    //}
                }
            }
        }
        return re;
    }
    
    public Boolean getdecont() {
        AttributeBinding id_form = (AttributeBinding) getBindings().getControlBinding("IdFormation");
        //getRechFormRep
        Boolean re = Boolean.FALSE;
        AttributeBinding lib_rep = (AttributeBinding) getBindings().getControlBinding("LibelleLong");
        DCIteratorBinding iter_rep = (DCIteratorBinding) getBindings().get("RepartitionROIterator");
        Row current_rep = iter_rep.getCurrentRow();
        if(current_rep != null){
            String id_rep = current_rep.getAttribute("IdRepartition").toString();
            
            OperationBinding op_rech_form_rep = getBindings().getOperationBinding("getRechFormRep");
            op_rech_form_rep.getParamsMap().put("id_rep",  id_rep);
            op_rech_form_rep.getParamsMap().put("id_form",  id_form);
            op_rech_form_rep.getParamsMap().put("id_annee",  getAnne_univers());
            op_rech_form_rep.execute();
            DCIteratorBinding iter_rep_rech = (DCIteratorBinding) getBindings().get("FormationRepartitionRechROIterator");
            Row current_rep_rech = iter_rep_rech.getCurrentRow();
            if(current_rep_rech != null){
                sessionScope.put("var_form_rep_existe", 1);
                OperationBinding op_rech_cle_rep = getBindings().getOperationBinding("getRepCleRep");
                op_rech_cle_rep.getParamsMap().put("id_rep",  id_rep);
                op_rech_cle_rep.execute();
                DCIteratorBinding iter_cle_rech = (DCIteratorBinding) getBindings().get("CleRepartitionRechROIterator");
                Row current_cle_rech = iter_cle_rech.getCurrentRow();
                if(current_cle_rech != null){

                        DCIteratorBinding iter_insc = (DCIteratorBinding) BindingContext.getCurrent().getCurrentBindingsEntry().get("CleRepartitionRechROIterator");
                        RowSetIterator rsi_insc = iter_insc.getViewObject().createRowSetIterator(null);
                        while (rsi_insc.hasNext()) {
                            Row nextRow = rsi_insc.next();
                            if(getIdTypeCompte() == Long.parseLong(nextRow.getAttribute("IdTypeCompte").toString()) ){
                                //setcocher(Boolean.TRUE);
                                re = Boolean.TRUE;
                            }
                        }
                    //}
                }
            }
        }
        return re;
    }
}

