package model.updatableview;

import java.sql.CallableStatement;
import java.sql.ResultSet;

import java.sql.SQLException;
import java.sql.Types;


import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 07 16:22:27 GMT 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class NotesModeEnseignementVOImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public NotesModeEnseignementVOImpl() {
    }

    /**
     * Returns the variable value for id_type_ctrl_var.
     * @return variable value for id_type_ctrl_var
     */
    public Long getid_type_ctrl_var() {
        return (Long) ensureVariableManager().getVariableValue("id_type_ctrl_var");
    }

    /**
     * Sets <code>value</code> for variable id_type_ctrl_var.
     * @param value value to bind as id_type_ctrl_var
     */
    public void setid_type_ctrl_var(Long value) {
        ensureVariableManager().setVariableValue("id_type_ctrl_var", value);
    }

    /**
     * Returns the variable value for id_cal_delib_var.
     * @return variable value for id_cal_delib_var
     */
    public Long getid_cal_delib_var() {
        return (Long) ensureVariableManager().getVariableValue("id_cal_delib_var");
    }

    /**
     * Sets <code>value</code> for variable id_cal_delib_var.
     * @param value value to bind as id_cal_delib_var
     */
    public void setid_cal_delib_var(Long value) {
        ensureVariableManager().setVariableValue("id_cal_delib_var", value);
    }

    /**
     * executeQueryForCollection - for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }

    /**
     * Returns the variable value for id_fil_ec.
     * @return variable value for id_fil_ec
     */
    public Long getid_fil_ec() {
        return (Long) ensureVariableManager().getVariableValue("id_fil_ec");
    }

    /**
     * Sets <code>value</code> for variable id_fil_ec.
     * @param value value to bind as id_fil_ec
     */
    public void setid_fil_ec(Long value) {
        ensureVariableManager().setVariableValue("id_fil_ec", value);
    }

}

